
nRF24L01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00001044  000010b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001044  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001890  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000db8  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00003700  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003714  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
       4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
       6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
       8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
       a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
       c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
       e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
      10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
      12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
      14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
      16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
      18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
      1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
      1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
      1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
      20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
      22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
      24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
      26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
      28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
      2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
      2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
      2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
      30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
      32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61
      40:	02 d0       	rcall	.+4      	; 0x46 <main>
      42:	fe c7       	rjmp	.+4092   	; 0x1040 <_exit>

00000044 <__bad_interrupt>:
      44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:
 *      Author: t400
 */

#include "main.h"

int main(){
      46:	cf 93       	push	r28
      48:	df 93       	push	r29
      4a:	cd b7       	in	r28, 0x3d	; 61
      4c:	de b7       	in	r29, 0x3e	; 62
      4e:	80 e0       	ldi	r24, 0x00	; 0
      50:	90 e0       	ldi	r25, 0x00	; 0

}
      52:	df 91       	pop	r29
      54:	cf 91       	pop	r28
      56:	08 95       	ret

00000058 <nRF2401_init>:
 *  Created on: Oct 15, 2017
 *      Author: t400
 */
#include "main.h"

void nRF2401_init() {
      58:	cf 93       	push	r28
      5a:	df 93       	push	r29
      5c:	cd b7       	in	r28, 0x3d	; 61
      5e:	de b7       	in	r29, 0x3e	; 62
	SETBIT(DDRB, DD_CE);
      60:	84 e2       	ldi	r24, 0x24	; 36
      62:	90 e0       	ldi	r25, 0x00	; 0
      64:	24 e2       	ldi	r18, 0x24	; 36
      66:	30 e0       	ldi	r19, 0x00	; 0
      68:	f9 01       	movw	r30, r18
      6a:	20 81       	ld	r18, Z
      6c:	22 60       	ori	r18, 0x02	; 2
      6e:	fc 01       	movw	r30, r24
      70:	20 83       	st	Z, r18
	spi_init();
      72:	70 d5       	rcall	.+2784   	; 0xb54 <spi_init>
	SETBIT(PORTB, CSN); // set ChipSelect to high this is deselect the device
      74:	85 e2       	ldi	r24, 0x25	; 37
      76:	90 e0       	ldi	r25, 0x00	; 0
      78:	25 e2       	ldi	r18, 0x25	; 37
      7a:	30 e0       	ldi	r19, 0x00	; 0
      7c:	f9 01       	movw	r30, r18
      7e:	20 81       	ld	r18, Z
      80:	24 60       	ori	r18, 0x04	; 4
      82:	fc 01       	movw	r30, r24
      84:	20 83       	st	Z, r18
}
      86:	df 91       	pop	r29
      88:	cf 91       	pop	r28
      8a:	08 95       	ret

0000008c <nRF_2401_transfer>:

uint8_t nRF_2401_transfer(uint8_t data) {
      8c:	cf 93       	push	r28
      8e:	df 93       	push	r29
      90:	cd b7       	in	r28, 0x3d	; 61
      92:	de b7       	in	r29, 0x3e	; 62
      94:	a2 97       	sbiw	r28, 0x22	; 34
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	f8 94       	cli
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	0f be       	out	0x3f, r0	; 63
      9e:	cd bf       	out	0x3d, r28	; 61
      a0:	8a a3       	std	Y+34, r24	; 0x22
	CLEARBIT(PORTB, CSN); //Activate Chip Selection on nRF2401
      a2:	85 e2       	ldi	r24, 0x25	; 37
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	25 e2       	ldi	r18, 0x25	; 37
      a8:	30 e0       	ldi	r19, 0x00	; 0
      aa:	f9 01       	movw	r30, r18
      ac:	20 81       	ld	r18, Z
      ae:	2b 7f       	andi	r18, 0xFB	; 251
      b0:	fc 01       	movw	r30, r24
      b2:	20 83       	st	Z, r18
      b4:	80 e0       	ldi	r24, 0x00	; 0
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	a0 e2       	ldi	r26, 0x20	; 32
      ba:	b1 e4       	ldi	r27, 0x41	; 65
      bc:	8a 83       	std	Y+2, r24	; 0x02
      be:	9b 83       	std	Y+3, r25	; 0x03
      c0:	ac 83       	std	Y+4, r26	; 0x04
      c2:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
      c4:	2b ea       	ldi	r18, 0xAB	; 171
      c6:	3a ea       	ldi	r19, 0xAA	; 170
      c8:	4a e2       	ldi	r20, 0x2A	; 42
      ca:	50 e4       	ldi	r21, 0x40	; 64
      cc:	6a 81       	ldd	r22, Y+2	; 0x02
      ce:	7b 81       	ldd	r23, Y+3	; 0x03
      d0:	8c 81       	ldd	r24, Y+4	; 0x04
      d2:	9d 81       	ldd	r25, Y+5	; 0x05
      d4:	52 d7       	rcall	.+3748   	; 0xf7a <__mulsf3>
      d6:	dc 01       	movw	r26, r24
      d8:	cb 01       	movw	r24, r22
      da:	8e 83       	std	Y+6, r24	; 0x06
      dc:	9f 83       	std	Y+7, r25	; 0x07
      de:	a8 87       	std	Y+8, r26	; 0x08
      e0:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
      e2:	8a 81       	ldd	r24, Y+2	; 0x02
      e4:	9b 81       	ldd	r25, Y+3	; 0x03
      e6:	ac 81       	ldd	r26, Y+4	; 0x04
      e8:	bd 81       	ldd	r27, Y+5	; 0x05
      ea:	9c 01       	movw	r18, r24
      ec:	ad 01       	movw	r20, r26
      ee:	bc 01       	movw	r22, r24
      f0:	cd 01       	movw	r24, r26
      f2:	ce d5       	rcall	.+2972   	; 0xc90 <__addsf3>
      f4:	dc 01       	movw	r26, r24
      f6:	cb 01       	movw	r24, r22
      f8:	8a 87       	std	Y+10, r24	; 0x0a
      fa:	9b 87       	std	Y+11, r25	; 0x0b
      fc:	ac 87       	std	Y+12, r26	; 0x0c
      fe:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
     100:	20 e0       	ldi	r18, 0x00	; 0
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	40 e8       	ldi	r20, 0x80	; 128
     106:	5f e3       	ldi	r21, 0x3F	; 63
     108:	6e 81       	ldd	r22, Y+6	; 0x06
     10a:	7f 81       	ldd	r23, Y+7	; 0x07
     10c:	88 85       	ldd	r24, Y+8	; 0x08
     10e:	99 85       	ldd	r25, Y+9	; 0x09
     110:	23 d6       	rcall	.+3142   	; 0xd58 <__cmpsf2>
     112:	88 23       	and	r24, r24
     114:	1c f4       	brge	.+6      	; 0x11c <nRF_2401_transfer+0x90>
		__ticks = 1;
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	8e 87       	std	Y+14, r24	; 0x0e
     11a:	a7 c0       	rjmp	.+334    	; 0x26a <nRF_2401_transfer+0x1de>
	else if (__tmp2 > 65535)
     11c:	20 e0       	ldi	r18, 0x00	; 0
     11e:	3f ef       	ldi	r19, 0xFF	; 255
     120:	4f e7       	ldi	r20, 0x7F	; 127
     122:	57 e4       	ldi	r21, 0x47	; 71
     124:	6a 85       	ldd	r22, Y+10	; 0x0a
     126:	7b 85       	ldd	r23, Y+11	; 0x0b
     128:	8c 85       	ldd	r24, Y+12	; 0x0c
     12a:	9d 85       	ldd	r25, Y+13	; 0x0d
     12c:	22 d7       	rcall	.+3652   	; 0xf72 <__gesf2>
     12e:	18 16       	cp	r1, r24
     130:	0c f0       	brlt	.+2      	; 0x134 <nRF_2401_transfer+0xa8>
     132:	74 c0       	rjmp	.+232    	; 0x21c <nRF_2401_transfer+0x190>
	{
		_delay_ms(__us / 1000.0);
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	4a e7       	ldi	r20, 0x7A	; 122
     13a:	54 e4       	ldi	r21, 0x44	; 68
     13c:	6a 81       	ldd	r22, Y+2	; 0x02
     13e:	7b 81       	ldd	r23, Y+3	; 0x03
     140:	8c 81       	ldd	r24, Y+4	; 0x04
     142:	9d 81       	ldd	r25, Y+5	; 0x05
     144:	0d d6       	rcall	.+3098   	; 0xd60 <__divsf3>
     146:	dc 01       	movw	r26, r24
     148:	cb 01       	movw	r24, r22
     14a:	8f 87       	std	Y+15, r24	; 0x0f
     14c:	98 8b       	std	Y+16, r25	; 0x10
     14e:	a9 8b       	std	Y+17, r26	; 0x11
     150:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     152:	20 e0       	ldi	r18, 0x00	; 0
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	4a ef       	ldi	r20, 0xFA	; 250
     158:	54 e4       	ldi	r21, 0x44	; 68
     15a:	6f 85       	ldd	r22, Y+15	; 0x0f
     15c:	78 89       	ldd	r23, Y+16	; 0x10
     15e:	89 89       	ldd	r24, Y+17	; 0x11
     160:	9a 89       	ldd	r25, Y+18	; 0x12
     162:	0b d7       	rcall	.+3606   	; 0xf7a <__mulsf3>
     164:	dc 01       	movw	r26, r24
     166:	cb 01       	movw	r24, r22
     168:	8b 8b       	std	Y+19, r24	; 0x13
     16a:	9c 8b       	std	Y+20, r25	; 0x14
     16c:	ad 8b       	std	Y+21, r26	; 0x15
     16e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	40 e8       	ldi	r20, 0x80	; 128
     176:	5f e3       	ldi	r21, 0x3F	; 63
     178:	6b 89       	ldd	r22, Y+19	; 0x13
     17a:	7c 89       	ldd	r23, Y+20	; 0x14
     17c:	8d 89       	ldd	r24, Y+21	; 0x15
     17e:	9e 89       	ldd	r25, Y+22	; 0x16
     180:	eb d5       	rcall	.+3030   	; 0xd58 <__cmpsf2>
     182:	88 23       	and	r24, r24
     184:	2c f4       	brge	.+10     	; 0x190 <nRF_2401_transfer+0x104>
		__ticks = 1;
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	98 8f       	std	Y+24, r25	; 0x18
     18c:	8f 8b       	std	Y+23, r24	; 0x17
     18e:	3b c0       	rjmp	.+118    	; 0x206 <nRF_2401_transfer+0x17a>
	else if (__tmp > 65535)
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	3f ef       	ldi	r19, 0xFF	; 255
     194:	4f e7       	ldi	r20, 0x7F	; 127
     196:	57 e4       	ldi	r21, 0x47	; 71
     198:	6b 89       	ldd	r22, Y+19	; 0x13
     19a:	7c 89       	ldd	r23, Y+20	; 0x14
     19c:	8d 89       	ldd	r24, Y+21	; 0x15
     19e:	9e 89       	ldd	r25, Y+22	; 0x16
     1a0:	e8 d6       	rcall	.+3536   	; 0xf72 <__gesf2>
     1a2:	18 16       	cp	r1, r24
     1a4:	3c f5       	brge	.+78     	; 0x1f4 <nRF_2401_transfer+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	40 e2       	ldi	r20, 0x20	; 32
     1ac:	51 e4       	ldi	r21, 0x41	; 65
     1ae:	6f 85       	ldd	r22, Y+15	; 0x0f
     1b0:	78 89       	ldd	r23, Y+16	; 0x10
     1b2:	89 89       	ldd	r24, Y+17	; 0x11
     1b4:	9a 89       	ldd	r25, Y+18	; 0x12
     1b6:	e1 d6       	rcall	.+3522   	; 0xf7a <__mulsf3>
     1b8:	dc 01       	movw	r26, r24
     1ba:	cb 01       	movw	r24, r22
     1bc:	bc 01       	movw	r22, r24
     1be:	cd 01       	movw	r24, r26
     1c0:	37 d6       	rcall	.+3182   	; 0xe30 <__fixunssfsi>
     1c2:	dc 01       	movw	r26, r24
     1c4:	cb 01       	movw	r24, r22
     1c6:	98 8f       	std	Y+24, r25	; 0x18
     1c8:	8f 8b       	std	Y+23, r24	; 0x17
     1ca:	0f c0       	rjmp	.+30     	; 0x1ea <nRF_2401_transfer+0x15e>
     1cc:	88 ec       	ldi	r24, 0xC8	; 200
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	9a 8f       	std	Y+26, r25	; 0x1a
     1d2:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1d4:	89 8d       	ldd	r24, Y+25	; 0x19
     1d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <nRF_2401_transfer+0x14c>
     1dc:	9a 8f       	std	Y+26, r25	; 0x1a
     1de:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1e0:	8f 89       	ldd	r24, Y+23	; 0x17
     1e2:	98 8d       	ldd	r25, Y+24	; 0x18
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	98 8f       	std	Y+24, r25	; 0x18
     1e8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ea:	8f 89       	ldd	r24, Y+23	; 0x17
     1ec:	98 8d       	ldd	r25, Y+24	; 0x18
     1ee:	89 2b       	or	r24, r25
     1f0:	69 f7       	brne	.-38     	; 0x1cc <nRF_2401_transfer+0x140>
     1f2:	3b c0       	rjmp	.+118    	; 0x26a <nRF_2401_transfer+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1f4:	6b 89       	ldd	r22, Y+19	; 0x13
     1f6:	7c 89       	ldd	r23, Y+20	; 0x14
     1f8:	8d 89       	ldd	r24, Y+21	; 0x15
     1fa:	9e 89       	ldd	r25, Y+22	; 0x16
     1fc:	19 d6       	rcall	.+3122   	; 0xe30 <__fixunssfsi>
     1fe:	dc 01       	movw	r26, r24
     200:	cb 01       	movw	r24, r22
     202:	98 8f       	std	Y+24, r25	; 0x18
     204:	8f 8b       	std	Y+23, r24	; 0x17
     206:	8f 89       	ldd	r24, Y+23	; 0x17
     208:	98 8d       	ldd	r25, Y+24	; 0x18
     20a:	9c 8f       	std	Y+28, r25	; 0x1c
     20c:	8b 8f       	std	Y+27, r24	; 0x1b
     20e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     210:	9c 8d       	ldd	r25, Y+28	; 0x1c
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <nRF_2401_transfer+0x186>
     216:	9c 8f       	std	Y+28, r25	; 0x1c
     218:	8b 8f       	std	Y+27, r24	; 0x1b
     21a:	27 c0       	rjmp	.+78     	; 0x26a <nRF_2401_transfer+0x1de>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	4f e7       	ldi	r20, 0x7F	; 127
     222:	53 e4       	ldi	r21, 0x43	; 67
     224:	6e 81       	ldd	r22, Y+6	; 0x06
     226:	7f 81       	ldd	r23, Y+7	; 0x07
     228:	88 85       	ldd	r24, Y+8	; 0x08
     22a:	99 85       	ldd	r25, Y+9	; 0x09
     22c:	a2 d6       	rcall	.+3396   	; 0xf72 <__gesf2>
     22e:	18 16       	cp	r1, r24
     230:	a4 f4       	brge	.+40     	; 0x25a <nRF_2401_transfer+0x1ce>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     232:	6a 85       	ldd	r22, Y+10	; 0x0a
     234:	7b 85       	ldd	r23, Y+11	; 0x0b
     236:	8c 85       	ldd	r24, Y+12	; 0x0c
     238:	9d 85       	ldd	r25, Y+13	; 0x0d
     23a:	fa d5       	rcall	.+3060   	; 0xe30 <__fixunssfsi>
     23c:	dc 01       	movw	r26, r24
     23e:	cb 01       	movw	r24, r22
     240:	9e 8f       	std	Y+30, r25	; 0x1e
     242:	8d 8f       	std	Y+29, r24	; 0x1d
     244:	8d 8d       	ldd	r24, Y+29	; 0x1d
     246:	9e 8d       	ldd	r25, Y+30	; 0x1e
     248:	98 a3       	std	Y+32, r25	; 0x20
     24a:	8f 8f       	std	Y+31, r24	; 0x1f
     24c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     24e:	98 a1       	ldd	r25, Y+32	; 0x20
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <nRF_2401_transfer+0x1c4>
     254:	98 a3       	std	Y+32, r25	; 0x20
     256:	8f 8f       	std	Y+31, r24	; 0x1f
     258:	0e c0       	rjmp	.+28     	; 0x276 <nRF_2401_transfer+0x1ea>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     25a:	6e 81       	ldd	r22, Y+6	; 0x06
     25c:	7f 81       	ldd	r23, Y+7	; 0x07
     25e:	88 85       	ldd	r24, Y+8	; 0x08
     260:	99 85       	ldd	r25, Y+9	; 0x09
     262:	e6 d5       	rcall	.+3020   	; 0xe30 <__fixunssfsi>
     264:	dc 01       	movw	r26, r24
     266:	cb 01       	movw	r24, r22
     268:	8e 87       	std	Y+14, r24	; 0x0e
     26a:	8e 85       	ldd	r24, Y+14	; 0x0e
     26c:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     26e:	89 a1       	ldd	r24, Y+33	; 0x21
     270:	8a 95       	dec	r24
     272:	f1 f7       	brne	.-4      	; 0x270 <nRF_2401_transfer+0x1e4>
     274:	89 a3       	std	Y+33, r24	; 0x21
	_delay_us(10);
	uint8_t result = spi_transfer(data);
     276:	8a a1       	ldd	r24, Y+34	; 0x22
     278:	86 d4       	rcall	.+2316   	; 0xb86 <spi_transfer>
     27a:	89 83       	std	Y+1, r24	; 0x01
	SETBIT(PORTB, CSN); //Deactivate Chip Selection on nRF2401
     27c:	85 e2       	ldi	r24, 0x25	; 37
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	25 e2       	ldi	r18, 0x25	; 37
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	f9 01       	movw	r30, r18
     286:	20 81       	ld	r18, Z
     288:	24 60       	ori	r18, 0x04	; 4
     28a:	fc 01       	movw	r30, r24
     28c:	20 83       	st	Z, r18
	return result;
     28e:	89 81       	ldd	r24, Y+1	; 0x01
}
     290:	a2 96       	adiw	r28, 0x22	; 34
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <nRF_2401_reg_write_m>:

void nRF_2401_reg_write_m(uint8_t reg, uint8_t *value, uint8_t size) {
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	c6 54       	subi	r28, 0x46	; 70
     2ac:	d1 09       	sbc	r29, r1
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	9e 01       	movw	r18, r28
     2ba:	2d 5b       	subi	r18, 0xBD	; 189
     2bc:	3f 4f       	sbci	r19, 0xFF	; 255
     2be:	f9 01       	movw	r30, r18
     2c0:	80 83       	st	Z, r24
     2c2:	ce 01       	movw	r24, r28
     2c4:	8c 5b       	subi	r24, 0xBC	; 188
     2c6:	9f 4f       	sbci	r25, 0xFF	; 255
     2c8:	fc 01       	movw	r30, r24
     2ca:	71 83       	std	Z+1, r23	; 0x01
     2cc:	60 83       	st	Z, r22
     2ce:	ce 01       	movw	r24, r28
     2d0:	8a 5b       	subi	r24, 0xBA	; 186
     2d2:	9f 4f       	sbci	r25, 0xFF	; 255
     2d4:	fc 01       	movw	r30, r24
     2d6:	40 83       	st	Z, r20
	CLEARBIT(PORTB, CSN); //Activate Chip Selection on nRF2401
     2d8:	85 e2       	ldi	r24, 0x25	; 37
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	25 e2       	ldi	r18, 0x25	; 37
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	f9 01       	movw	r30, r18
     2e2:	20 81       	ld	r18, Z
     2e4:	2b 7f       	andi	r18, 0xFB	; 251
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	a0 e2       	ldi	r26, 0x20	; 32
     2f0:	b1 e4       	ldi	r27, 0x41	; 65
     2f2:	8a 83       	std	Y+2, r24	; 0x02
     2f4:	9b 83       	std	Y+3, r25	; 0x03
     2f6:	ac 83       	std	Y+4, r26	; 0x04
     2f8:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     2fa:	2b ea       	ldi	r18, 0xAB	; 171
     2fc:	3a ea       	ldi	r19, 0xAA	; 170
     2fe:	4a e2       	ldi	r20, 0x2A	; 42
     300:	50 e4       	ldi	r21, 0x40	; 64
     302:	6a 81       	ldd	r22, Y+2	; 0x02
     304:	7b 81       	ldd	r23, Y+3	; 0x03
     306:	8c 81       	ldd	r24, Y+4	; 0x04
     308:	9d 81       	ldd	r25, Y+5	; 0x05
     30a:	37 d6       	rcall	.+3182   	; 0xf7a <__mulsf3>
     30c:	dc 01       	movw	r26, r24
     30e:	cb 01       	movw	r24, r22
     310:	8e 83       	std	Y+6, r24	; 0x06
     312:	9f 83       	std	Y+7, r25	; 0x07
     314:	a8 87       	std	Y+8, r26	; 0x08
     316:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
     318:	8a 81       	ldd	r24, Y+2	; 0x02
     31a:	9b 81       	ldd	r25, Y+3	; 0x03
     31c:	ac 81       	ldd	r26, Y+4	; 0x04
     31e:	bd 81       	ldd	r27, Y+5	; 0x05
     320:	9c 01       	movw	r18, r24
     322:	ad 01       	movw	r20, r26
     324:	bc 01       	movw	r22, r24
     326:	cd 01       	movw	r24, r26
     328:	b3 d4       	rcall	.+2406   	; 0xc90 <__addsf3>
     32a:	dc 01       	movw	r26, r24
     32c:	cb 01       	movw	r24, r22
     32e:	8a 87       	std	Y+10, r24	; 0x0a
     330:	9b 87       	std	Y+11, r25	; 0x0b
     332:	ac 87       	std	Y+12, r26	; 0x0c
     334:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	40 e8       	ldi	r20, 0x80	; 128
     33c:	5f e3       	ldi	r21, 0x3F	; 63
     33e:	6e 81       	ldd	r22, Y+6	; 0x06
     340:	7f 81       	ldd	r23, Y+7	; 0x07
     342:	88 85       	ldd	r24, Y+8	; 0x08
     344:	99 85       	ldd	r25, Y+9	; 0x09
     346:	08 d5       	rcall	.+2576   	; 0xd58 <__cmpsf2>
     348:	88 23       	and	r24, r24
     34a:	1c f4       	brge	.+6      	; 0x352 <nRF_2401_reg_write_m+0xb0>
		__ticks = 1;
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	8e 87       	std	Y+14, r24	; 0x0e
     350:	a7 c0       	rjmp	.+334    	; 0x4a0 <nRF_2401_reg_write_m+0x1fe>
	else if (__tmp2 > 65535)
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	3f ef       	ldi	r19, 0xFF	; 255
     356:	4f e7       	ldi	r20, 0x7F	; 127
     358:	57 e4       	ldi	r21, 0x47	; 71
     35a:	6a 85       	ldd	r22, Y+10	; 0x0a
     35c:	7b 85       	ldd	r23, Y+11	; 0x0b
     35e:	8c 85       	ldd	r24, Y+12	; 0x0c
     360:	9d 85       	ldd	r25, Y+13	; 0x0d
     362:	07 d6       	rcall	.+3086   	; 0xf72 <__gesf2>
     364:	18 16       	cp	r1, r24
     366:	0c f0       	brlt	.+2      	; 0x36a <nRF_2401_reg_write_m+0xc8>
     368:	74 c0       	rjmp	.+232    	; 0x452 <nRF_2401_reg_write_m+0x1b0>
	{
		_delay_ms(__us / 1000.0);
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	4a e7       	ldi	r20, 0x7A	; 122
     370:	54 e4       	ldi	r21, 0x44	; 68
     372:	6a 81       	ldd	r22, Y+2	; 0x02
     374:	7b 81       	ldd	r23, Y+3	; 0x03
     376:	8c 81       	ldd	r24, Y+4	; 0x04
     378:	9d 81       	ldd	r25, Y+5	; 0x05
     37a:	f2 d4       	rcall	.+2532   	; 0xd60 <__divsf3>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	8f 87       	std	Y+15, r24	; 0x0f
     382:	98 8b       	std	Y+16, r25	; 0x10
     384:	a9 8b       	std	Y+17, r26	; 0x11
     386:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	4a ef       	ldi	r20, 0xFA	; 250
     38e:	54 e4       	ldi	r21, 0x44	; 68
     390:	6f 85       	ldd	r22, Y+15	; 0x0f
     392:	78 89       	ldd	r23, Y+16	; 0x10
     394:	89 89       	ldd	r24, Y+17	; 0x11
     396:	9a 89       	ldd	r25, Y+18	; 0x12
     398:	f0 d5       	rcall	.+3040   	; 0xf7a <__mulsf3>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	8b 8b       	std	Y+19, r24	; 0x13
     3a0:	9c 8b       	std	Y+20, r25	; 0x14
     3a2:	ad 8b       	std	Y+21, r26	; 0x15
     3a4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e8       	ldi	r20, 0x80	; 128
     3ac:	5f e3       	ldi	r21, 0x3F	; 63
     3ae:	6b 89       	ldd	r22, Y+19	; 0x13
     3b0:	7c 89       	ldd	r23, Y+20	; 0x14
     3b2:	8d 89       	ldd	r24, Y+21	; 0x15
     3b4:	9e 89       	ldd	r25, Y+22	; 0x16
     3b6:	d0 d4       	rcall	.+2464   	; 0xd58 <__cmpsf2>
     3b8:	88 23       	and	r24, r24
     3ba:	2c f4       	brge	.+10     	; 0x3c6 <nRF_2401_reg_write_m+0x124>
		__ticks = 1;
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	98 8f       	std	Y+24, r25	; 0x18
     3c2:	8f 8b       	std	Y+23, r24	; 0x17
     3c4:	3b c0       	rjmp	.+118    	; 0x43c <nRF_2401_reg_write_m+0x19a>
	else if (__tmp > 65535)
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	3f ef       	ldi	r19, 0xFF	; 255
     3ca:	4f e7       	ldi	r20, 0x7F	; 127
     3cc:	57 e4       	ldi	r21, 0x47	; 71
     3ce:	6b 89       	ldd	r22, Y+19	; 0x13
     3d0:	7c 89       	ldd	r23, Y+20	; 0x14
     3d2:	8d 89       	ldd	r24, Y+21	; 0x15
     3d4:	9e 89       	ldd	r25, Y+22	; 0x16
     3d6:	cd d5       	rcall	.+2970   	; 0xf72 <__gesf2>
     3d8:	18 16       	cp	r1, r24
     3da:	3c f5       	brge	.+78     	; 0x42a <nRF_2401_reg_write_m+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	40 e2       	ldi	r20, 0x20	; 32
     3e2:	51 e4       	ldi	r21, 0x41	; 65
     3e4:	6f 85       	ldd	r22, Y+15	; 0x0f
     3e6:	78 89       	ldd	r23, Y+16	; 0x10
     3e8:	89 89       	ldd	r24, Y+17	; 0x11
     3ea:	9a 89       	ldd	r25, Y+18	; 0x12
     3ec:	c6 d5       	rcall	.+2956   	; 0xf7a <__mulsf3>
     3ee:	dc 01       	movw	r26, r24
     3f0:	cb 01       	movw	r24, r22
     3f2:	bc 01       	movw	r22, r24
     3f4:	cd 01       	movw	r24, r26
     3f6:	1c d5       	rcall	.+2616   	; 0xe30 <__fixunssfsi>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	98 8f       	std	Y+24, r25	; 0x18
     3fe:	8f 8b       	std	Y+23, r24	; 0x17
     400:	0f c0       	rjmp	.+30     	; 0x420 <nRF_2401_reg_write_m+0x17e>
     402:	88 ec       	ldi	r24, 0xC8	; 200
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	9a 8f       	std	Y+26, r25	; 0x1a
     408:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     40a:	89 8d       	ldd	r24, Y+25	; 0x19
     40c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <nRF_2401_reg_write_m+0x16c>
     412:	9a 8f       	std	Y+26, r25	; 0x1a
     414:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     416:	8f 89       	ldd	r24, Y+23	; 0x17
     418:	98 8d       	ldd	r25, Y+24	; 0x18
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	98 8f       	std	Y+24, r25	; 0x18
     41e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     420:	8f 89       	ldd	r24, Y+23	; 0x17
     422:	98 8d       	ldd	r25, Y+24	; 0x18
     424:	89 2b       	or	r24, r25
     426:	69 f7       	brne	.-38     	; 0x402 <nRF_2401_reg_write_m+0x160>
     428:	3b c0       	rjmp	.+118    	; 0x4a0 <nRF_2401_reg_write_m+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     42a:	6b 89       	ldd	r22, Y+19	; 0x13
     42c:	7c 89       	ldd	r23, Y+20	; 0x14
     42e:	8d 89       	ldd	r24, Y+21	; 0x15
     430:	9e 89       	ldd	r25, Y+22	; 0x16
     432:	fe d4       	rcall	.+2556   	; 0xe30 <__fixunssfsi>
     434:	dc 01       	movw	r26, r24
     436:	cb 01       	movw	r24, r22
     438:	98 8f       	std	Y+24, r25	; 0x18
     43a:	8f 8b       	std	Y+23, r24	; 0x17
     43c:	8f 89       	ldd	r24, Y+23	; 0x17
     43e:	98 8d       	ldd	r25, Y+24	; 0x18
     440:	9c 8f       	std	Y+28, r25	; 0x1c
     442:	8b 8f       	std	Y+27, r24	; 0x1b
     444:	8b 8d       	ldd	r24, Y+27	; 0x1b
     446:	9c 8d       	ldd	r25, Y+28	; 0x1c
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <nRF_2401_reg_write_m+0x1a6>
     44c:	9c 8f       	std	Y+28, r25	; 0x1c
     44e:	8b 8f       	std	Y+27, r24	; 0x1b
     450:	27 c0       	rjmp	.+78     	; 0x4a0 <nRF_2401_reg_write_m+0x1fe>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	4f e7       	ldi	r20, 0x7F	; 127
     458:	53 e4       	ldi	r21, 0x43	; 67
     45a:	6e 81       	ldd	r22, Y+6	; 0x06
     45c:	7f 81       	ldd	r23, Y+7	; 0x07
     45e:	88 85       	ldd	r24, Y+8	; 0x08
     460:	99 85       	ldd	r25, Y+9	; 0x09
     462:	87 d5       	rcall	.+2830   	; 0xf72 <__gesf2>
     464:	18 16       	cp	r1, r24
     466:	a4 f4       	brge	.+40     	; 0x490 <nRF_2401_reg_write_m+0x1ee>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     468:	6a 85       	ldd	r22, Y+10	; 0x0a
     46a:	7b 85       	ldd	r23, Y+11	; 0x0b
     46c:	8c 85       	ldd	r24, Y+12	; 0x0c
     46e:	9d 85       	ldd	r25, Y+13	; 0x0d
     470:	df d4       	rcall	.+2494   	; 0xe30 <__fixunssfsi>
     472:	dc 01       	movw	r26, r24
     474:	cb 01       	movw	r24, r22
     476:	9e 8f       	std	Y+30, r25	; 0x1e
     478:	8d 8f       	std	Y+29, r24	; 0x1d
     47a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     47c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     47e:	98 a3       	std	Y+32, r25	; 0x20
     480:	8f 8f       	std	Y+31, r24	; 0x1f
     482:	8f 8d       	ldd	r24, Y+31	; 0x1f
     484:	98 a1       	ldd	r25, Y+32	; 0x20
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <nRF_2401_reg_write_m+0x1e4>
     48a:	98 a3       	std	Y+32, r25	; 0x20
     48c:	8f 8f       	std	Y+31, r24	; 0x1f
     48e:	0e c0       	rjmp	.+28     	; 0x4ac <nRF_2401_reg_write_m+0x20a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     490:	6e 81       	ldd	r22, Y+6	; 0x06
     492:	7f 81       	ldd	r23, Y+7	; 0x07
     494:	88 85       	ldd	r24, Y+8	; 0x08
     496:	99 85       	ldd	r25, Y+9	; 0x09
     498:	cb d4       	rcall	.+2454   	; 0xe30 <__fixunssfsi>
     49a:	dc 01       	movw	r26, r24
     49c:	cb 01       	movw	r24, r22
     49e:	8e 87       	std	Y+14, r24	; 0x0e
     4a0:	8e 85       	ldd	r24, Y+14	; 0x0e
     4a2:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4a4:	89 a1       	ldd	r24, Y+33	; 0x21
     4a6:	8a 95       	dec	r24
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <nRF_2401_reg_write_m+0x204>
     4aa:	89 a3       	std	Y+33, r24	; 0x21
	_delay_us(10);
	spi_transfer(W_REGISTER + reg);
     4ac:	ce 01       	movw	r24, r28
     4ae:	8d 5b       	subi	r24, 0xBD	; 189
     4b0:	9f 4f       	sbci	r25, 0xFF	; 255
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	80 5e       	subi	r24, 0xE0	; 224
     4b8:	66 d3       	rcall	.+1740   	; 0xb86 <spi_transfer>
	uint8_t index;
	for (index = 0; index < size; index++) {
     4ba:	19 82       	std	Y+1, r1	; 0x01
     4bc:	15 c1       	rjmp	.+554    	; 0x6e8 <__stack+0x1e9>
		spi_transfer(value[index]);
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	88 2f       	mov	r24, r24
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	9e 01       	movw	r18, r28
     4c6:	2c 5b       	subi	r18, 0xBC	; 188
     4c8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ca:	f9 01       	movw	r30, r18
     4cc:	20 81       	ld	r18, Z
     4ce:	31 81       	ldd	r19, Z+1	; 0x01
     4d0:	82 0f       	add	r24, r18
     4d2:	93 1f       	adc	r25, r19
     4d4:	fc 01       	movw	r30, r24
     4d6:	80 81       	ld	r24, Z
     4d8:	56 d3       	rcall	.+1708   	; 0xb86 <spi_transfer>
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b1 e4       	ldi	r27, 0x41	; 65
     4e2:	8a a3       	std	Y+34, r24	; 0x22
     4e4:	9b a3       	std	Y+35, r25	; 0x23
     4e6:	ac a3       	std	Y+36, r26	; 0x24
     4e8:	bd a3       	std	Y+37, r27	; 0x25
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     4ea:	2b ea       	ldi	r18, 0xAB	; 171
     4ec:	3a ea       	ldi	r19, 0xAA	; 170
     4ee:	4a e2       	ldi	r20, 0x2A	; 42
     4f0:	50 e4       	ldi	r21, 0x40	; 64
     4f2:	6a a1       	ldd	r22, Y+34	; 0x22
     4f4:	7b a1       	ldd	r23, Y+35	; 0x23
     4f6:	8c a1       	ldd	r24, Y+36	; 0x24
     4f8:	9d a1       	ldd	r25, Y+37	; 0x25
     4fa:	3f d5       	rcall	.+2686   	; 0xf7a <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e a3       	std	Y+38, r24	; 0x26
     502:	9f a3       	std	Y+39, r25	; 0x27
     504:	a8 a7       	std	Y+40, r26	; 0x28
     506:	b9 a7       	std	Y+41, r27	; 0x29
	__tmp2 = ((F_CPU) / 4e6) * __us;
     508:	8a a1       	ldd	r24, Y+34	; 0x22
     50a:	9b a1       	ldd	r25, Y+35	; 0x23
     50c:	ac a1       	ldd	r26, Y+36	; 0x24
     50e:	bd a1       	ldd	r27, Y+37	; 0x25
     510:	9c 01       	movw	r18, r24
     512:	ad 01       	movw	r20, r26
     514:	bc 01       	movw	r22, r24
     516:	cd 01       	movw	r24, r26
     518:	bb d3       	rcall	.+1910   	; 0xc90 <__addsf3>
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	8a a7       	std	Y+42, r24	; 0x2a
     520:	9b a7       	std	Y+43, r25	; 0x2b
     522:	ac a7       	std	Y+44, r26	; 0x2c
     524:	bd a7       	std	Y+45, r27	; 0x2d
	if (__tmp < 1.0)
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	40 e8       	ldi	r20, 0x80	; 128
     52c:	5f e3       	ldi	r21, 0x3F	; 63
     52e:	6e a1       	ldd	r22, Y+38	; 0x26
     530:	7f a1       	ldd	r23, Y+39	; 0x27
     532:	88 a5       	ldd	r24, Y+40	; 0x28
     534:	99 a5       	ldd	r25, Y+41	; 0x29
     536:	10 d4       	rcall	.+2080   	; 0xd58 <__cmpsf2>
     538:	88 23       	and	r24, r24
     53a:	1c f4       	brge	.+6      	; 0x542 <__stack+0x43>
		__ticks = 1;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	8e a7       	std	Y+46, r24	; 0x2e
     540:	bd c0       	rjmp	.+378    	; 0x6bc <__stack+0x1bd>
	else if (__tmp2 > 65535)
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	3f ef       	ldi	r19, 0xFF	; 255
     546:	4f e7       	ldi	r20, 0x7F	; 127
     548:	57 e4       	ldi	r21, 0x47	; 71
     54a:	6a a5       	ldd	r22, Y+42	; 0x2a
     54c:	7b a5       	ldd	r23, Y+43	; 0x2b
     54e:	8c a5       	ldd	r24, Y+44	; 0x2c
     550:	9d a5       	ldd	r25, Y+45	; 0x2d
     552:	0f d5       	rcall	.+2590   	; 0xf72 <__gesf2>
     554:	18 16       	cp	r1, r24
     556:	0c f0       	brlt	.+2      	; 0x55a <__stack+0x5b>
     558:	80 c0       	rjmp	.+256    	; 0x65a <__stack+0x15b>
	{
		_delay_ms(__us / 1000.0);
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	4a e7       	ldi	r20, 0x7A	; 122
     560:	54 e4       	ldi	r21, 0x44	; 68
     562:	6a a1       	ldd	r22, Y+34	; 0x22
     564:	7b a1       	ldd	r23, Y+35	; 0x23
     566:	8c a1       	ldd	r24, Y+36	; 0x24
     568:	9d a1       	ldd	r25, Y+37	; 0x25
     56a:	fa d3       	rcall	.+2036   	; 0xd60 <__divsf3>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	8f a7       	std	Y+47, r24	; 0x2f
     572:	98 ab       	std	Y+48, r25	; 0x30
     574:	a9 ab       	std	Y+49, r26	; 0x31
     576:	ba ab       	std	Y+50, r27	; 0x32

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	4a ef       	ldi	r20, 0xFA	; 250
     57e:	54 e4       	ldi	r21, 0x44	; 68
     580:	6f a5       	ldd	r22, Y+47	; 0x2f
     582:	78 a9       	ldd	r23, Y+48	; 0x30
     584:	89 a9       	ldd	r24, Y+49	; 0x31
     586:	9a a9       	ldd	r25, Y+50	; 0x32
     588:	f8 d4       	rcall	.+2544   	; 0xf7a <__mulsf3>
     58a:	dc 01       	movw	r26, r24
     58c:	cb 01       	movw	r24, r22
     58e:	8b ab       	std	Y+51, r24	; 0x33
     590:	9c ab       	std	Y+52, r25	; 0x34
     592:	ad ab       	std	Y+53, r26	; 0x35
     594:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	40 e8       	ldi	r20, 0x80	; 128
     59c:	5f e3       	ldi	r21, 0x3F	; 63
     59e:	6b a9       	ldd	r22, Y+51	; 0x33
     5a0:	7c a9       	ldd	r23, Y+52	; 0x34
     5a2:	8d a9       	ldd	r24, Y+53	; 0x35
     5a4:	9e a9       	ldd	r25, Y+54	; 0x36
     5a6:	d8 d3       	rcall	.+1968   	; 0xd58 <__cmpsf2>
     5a8:	88 23       	and	r24, r24
     5aa:	2c f4       	brge	.+10     	; 0x5b6 <__stack+0xb7>
		__ticks = 1;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	98 af       	std	Y+56, r25	; 0x38
     5b2:	8f ab       	std	Y+55, r24	; 0x37
     5b4:	41 c0       	rjmp	.+130    	; 0x638 <__stack+0x139>
	else if (__tmp > 65535)
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	3f ef       	ldi	r19, 0xFF	; 255
     5ba:	4f e7       	ldi	r20, 0x7F	; 127
     5bc:	57 e4       	ldi	r21, 0x47	; 71
     5be:	6b a9       	ldd	r22, Y+51	; 0x33
     5c0:	7c a9       	ldd	r23, Y+52	; 0x34
     5c2:	8d a9       	ldd	r24, Y+53	; 0x35
     5c4:	9e a9       	ldd	r25, Y+54	; 0x36
     5c6:	d5 d4       	rcall	.+2474   	; 0xf72 <__gesf2>
     5c8:	18 16       	cp	r1, r24
     5ca:	6c f5       	brge	.+90     	; 0x626 <__stack+0x127>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e2       	ldi	r20, 0x20	; 32
     5d2:	51 e4       	ldi	r21, 0x41	; 65
     5d4:	6f a5       	ldd	r22, Y+47	; 0x2f
     5d6:	78 a9       	ldd	r23, Y+48	; 0x30
     5d8:	89 a9       	ldd	r24, Y+49	; 0x31
     5da:	9a a9       	ldd	r25, Y+50	; 0x32
     5dc:	ce d4       	rcall	.+2460   	; 0xf7a <__mulsf3>
     5de:	dc 01       	movw	r26, r24
     5e0:	cb 01       	movw	r24, r22
     5e2:	bc 01       	movw	r22, r24
     5e4:	cd 01       	movw	r24, r26
     5e6:	24 d4       	rcall	.+2120   	; 0xe30 <__fixunssfsi>
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	98 af       	std	Y+56, r25	; 0x38
     5ee:	8f ab       	std	Y+55, r24	; 0x37
     5f0:	0f c0       	rjmp	.+30     	; 0x610 <__stack+0x111>
     5f2:	88 ec       	ldi	r24, 0xC8	; 200
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	9a af       	std	Y+58, r25	; 0x3a
     5f8:	89 af       	std	Y+57, r24	; 0x39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5fa:	89 ad       	ldd	r24, Y+57	; 0x39
     5fc:	9a ad       	ldd	r25, Y+58	; 0x3a
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <__stack+0xff>
     602:	9a af       	std	Y+58, r25	; 0x3a
     604:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     606:	8f a9       	ldd	r24, Y+55	; 0x37
     608:	98 ad       	ldd	r25, Y+56	; 0x38
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	98 af       	std	Y+56, r25	; 0x38
     60e:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     610:	8f a9       	ldd	r24, Y+55	; 0x37
     612:	98 ad       	ldd	r25, Y+56	; 0x38
     614:	89 2b       	or	r24, r25
     616:	69 f7       	brne	.-38     	; 0x5f2 <__stack+0xf3>
     618:	ce 01       	movw	r24, r28
     61a:	8e 5b       	subi	r24, 0xBE	; 190
     61c:	9f 4f       	sbci	r25, 0xFF	; 255
     61e:	fc 01       	movw	r30, r24
     620:	80 81       	ld	r24, Z
     622:	8e a7       	std	Y+46, r24	; 0x2e
     624:	4b c0       	rjmp	.+150    	; 0x6bc <__stack+0x1bd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     626:	6b a9       	ldd	r22, Y+51	; 0x33
     628:	7c a9       	ldd	r23, Y+52	; 0x34
     62a:	8d a9       	ldd	r24, Y+53	; 0x35
     62c:	9e a9       	ldd	r25, Y+54	; 0x36
     62e:	00 d4       	rcall	.+2048   	; 0xe30 <__fixunssfsi>
     630:	dc 01       	movw	r26, r24
     632:	cb 01       	movw	r24, r22
     634:	98 af       	std	Y+56, r25	; 0x38
     636:	8f ab       	std	Y+55, r24	; 0x37
     638:	8f a9       	ldd	r24, Y+55	; 0x37
     63a:	98 ad       	ldd	r25, Y+56	; 0x38
     63c:	9c af       	std	Y+60, r25	; 0x3c
     63e:	8b af       	std	Y+59, r24	; 0x3b
     640:	8b ad       	ldd	r24, Y+59	; 0x3b
     642:	9c ad       	ldd	r25, Y+60	; 0x3c
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <__stack+0x145>
     648:	9c af       	std	Y+60, r25	; 0x3c
     64a:	8b af       	std	Y+59, r24	; 0x3b
     64c:	ce 01       	movw	r24, r28
     64e:	8e 5b       	subi	r24, 0xBE	; 190
     650:	9f 4f       	sbci	r25, 0xFF	; 255
     652:	fc 01       	movw	r30, r24
     654:	80 81       	ld	r24, Z
     656:	8e a7       	std	Y+46, r24	; 0x2e
     658:	31 c0       	rjmp	.+98     	; 0x6bc <__stack+0x1bd>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	4f e7       	ldi	r20, 0x7F	; 127
     660:	53 e4       	ldi	r21, 0x43	; 67
     662:	6e a1       	ldd	r22, Y+38	; 0x26
     664:	7f a1       	ldd	r23, Y+39	; 0x27
     666:	88 a5       	ldd	r24, Y+40	; 0x28
     668:	99 a5       	ldd	r25, Y+41	; 0x29
     66a:	83 d4       	rcall	.+2310   	; 0xf72 <__gesf2>
     66c:	18 16       	cp	r1, r24
     66e:	f4 f4       	brge	.+60     	; 0x6ac <__stack+0x1ad>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     670:	6a a5       	ldd	r22, Y+42	; 0x2a
     672:	7b a5       	ldd	r23, Y+43	; 0x2b
     674:	8c a5       	ldd	r24, Y+44	; 0x2c
     676:	9d a5       	ldd	r25, Y+45	; 0x2d
     678:	db d3       	rcall	.+1974   	; 0xe30 <__fixunssfsi>
     67a:	dc 01       	movw	r26, r24
     67c:	cb 01       	movw	r24, r22
     67e:	9e af       	std	Y+62, r25	; 0x3e
     680:	8d af       	std	Y+61, r24	; 0x3d
     682:	2d ad       	ldd	r18, Y+61	; 0x3d
     684:	3e ad       	ldd	r19, Y+62	; 0x3e
     686:	ce 01       	movw	r24, r28
     688:	cf 96       	adiw	r24, 0x3f	; 63
     68a:	fc 01       	movw	r30, r24
     68c:	31 83       	std	Z+1, r19	; 0x01
     68e:	20 83       	st	Z, r18
     690:	ce 01       	movw	r24, r28
     692:	cf 96       	adiw	r24, 0x3f	; 63
     694:	fc 01       	movw	r30, r24
     696:	80 81       	ld	r24, Z
     698:	91 81       	ldd	r25, Z+1	; 0x01
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <__stack+0x19b>
     69e:	9e 01       	movw	r18, r28
     6a0:	21 5c       	subi	r18, 0xC1	; 193
     6a2:	3f 4f       	sbci	r19, 0xFF	; 255
     6a4:	f9 01       	movw	r30, r18
     6a6:	91 83       	std	Z+1, r25	; 0x01
     6a8:	80 83       	st	Z, r24
     6aa:	1b c0       	rjmp	.+54     	; 0x6e2 <__stack+0x1e3>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6ac:	6e a1       	ldd	r22, Y+38	; 0x26
     6ae:	7f a1       	ldd	r23, Y+39	; 0x27
     6b0:	88 a5       	ldd	r24, Y+40	; 0x28
     6b2:	99 a5       	ldd	r25, Y+41	; 0x29
     6b4:	bd d3       	rcall	.+1914   	; 0xe30 <__fixunssfsi>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	8e a7       	std	Y+46, r24	; 0x2e
     6bc:	ce 01       	movw	r24, r28
     6be:	8f 5b       	subi	r24, 0xBF	; 191
     6c0:	9f 4f       	sbci	r25, 0xFF	; 255
     6c2:	2e a5       	ldd	r18, Y+46	; 0x2e
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6c8:	ce 01       	movw	r24, r28
     6ca:	8f 5b       	subi	r24, 0xBF	; 191
     6cc:	9f 4f       	sbci	r25, 0xFF	; 255
     6ce:	fc 01       	movw	r30, r24
     6d0:	80 81       	ld	r24, Z
     6d2:	28 2f       	mov	r18, r24
     6d4:	2a 95       	dec	r18
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <__stack+0x1d5>
     6d8:	ce 01       	movw	r24, r28
     6da:	8f 5b       	subi	r24, 0xBF	; 191
     6dc:	9f 4f       	sbci	r25, 0xFF	; 255
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18
void nRF_2401_reg_write_m(uint8_t reg, uint8_t *value, uint8_t size) {
	CLEARBIT(PORTB, CSN); //Activate Chip Selection on nRF2401
	_delay_us(10);
	spi_transfer(W_REGISTER + reg);
	uint8_t index;
	for (index = 0; index < size; index++) {
     6e2:	89 81       	ldd	r24, Y+1	; 0x01
     6e4:	8f 5f       	subi	r24, 0xFF	; 255
     6e6:	89 83       	std	Y+1, r24	; 0x01
     6e8:	ce 01       	movw	r24, r28
     6ea:	8a 5b       	subi	r24, 0xBA	; 186
     6ec:	9f 4f       	sbci	r25, 0xFF	; 255
     6ee:	29 81       	ldd	r18, Y+1	; 0x01
     6f0:	fc 01       	movw	r30, r24
     6f2:	80 81       	ld	r24, Z
     6f4:	28 17       	cp	r18, r24
     6f6:	08 f4       	brcc	.+2      	; 0x6fa <__stack+0x1fb>
     6f8:	e2 ce       	rjmp	.-572    	; 0x4be <nRF_2401_reg_write_m+0x21c>
		spi_transfer(value[index]);
		_delay_us(10);
	}
	SETBIT(PORTB, CSN); //deactivate ChipSelect on nRF2401
     6fa:	85 e2       	ldi	r24, 0x25	; 37
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	25 e2       	ldi	r18, 0x25	; 37
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	f9 01       	movw	r30, r18
     704:	20 81       	ld	r18, Z
     706:	24 60       	ori	r18, 0x04	; 4
     708:	fc 01       	movw	r30, r24
     70a:	20 83       	st	Z, r18
}
     70c:	ca 5b       	subi	r28, 0xBA	; 186
     70e:	df 4f       	sbci	r29, 0xFF	; 255
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret

00000720 <nRF_2401_reg_write_s>:

void nRF_2401_reg_write_s(uint8_t reg, uint8_t data) {
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	a2 97       	sbiw	r28, 0x22	; 34
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	89 a3       	std	Y+33, r24	; 0x21
     736:	6a a3       	std	Y+34, r22	; 0x22
	CLEARBIT(PORTB, CSN); //Activate Chip Selection on nRF2401
     738:	85 e2       	ldi	r24, 0x25	; 37
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	25 e2       	ldi	r18, 0x25	; 37
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	f9 01       	movw	r30, r18
     742:	20 81       	ld	r18, Z
     744:	2b 7f       	andi	r18, 0xFB	; 251
     746:	fc 01       	movw	r30, r24
     748:	20 83       	st	Z, r18
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	a0 e2       	ldi	r26, 0x20	; 32
     750:	b1 e4       	ldi	r27, 0x41	; 65
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	9a 83       	std	Y+2, r25	; 0x02
     756:	ab 83       	std	Y+3, r26	; 0x03
     758:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     75a:	2b ea       	ldi	r18, 0xAB	; 171
     75c:	3a ea       	ldi	r19, 0xAA	; 170
     75e:	4a e2       	ldi	r20, 0x2A	; 42
     760:	50 e4       	ldi	r21, 0x40	; 64
     762:	69 81       	ldd	r22, Y+1	; 0x01
     764:	7a 81       	ldd	r23, Y+2	; 0x02
     766:	8b 81       	ldd	r24, Y+3	; 0x03
     768:	9c 81       	ldd	r25, Y+4	; 0x04
     76a:	07 d4       	rcall	.+2062   	; 0xf7a <__mulsf3>
     76c:	dc 01       	movw	r26, r24
     76e:	cb 01       	movw	r24, r22
     770:	8d 83       	std	Y+5, r24	; 0x05
     772:	9e 83       	std	Y+6, r25	; 0x06
     774:	af 83       	std	Y+7, r26	; 0x07
     776:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	9a 81       	ldd	r25, Y+2	; 0x02
     77c:	ab 81       	ldd	r26, Y+3	; 0x03
     77e:	bc 81       	ldd	r27, Y+4	; 0x04
     780:	9c 01       	movw	r18, r24
     782:	ad 01       	movw	r20, r26
     784:	bc 01       	movw	r22, r24
     786:	cd 01       	movw	r24, r26
     788:	83 d2       	rcall	.+1286   	; 0xc90 <__addsf3>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	89 87       	std	Y+9, r24	; 0x09
     790:	9a 87       	std	Y+10, r25	; 0x0a
     792:	ab 87       	std	Y+11, r26	; 0x0b
     794:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e8       	ldi	r20, 0x80	; 128
     79c:	5f e3       	ldi	r21, 0x3F	; 63
     79e:	6d 81       	ldd	r22, Y+5	; 0x05
     7a0:	7e 81       	ldd	r23, Y+6	; 0x06
     7a2:	8f 81       	ldd	r24, Y+7	; 0x07
     7a4:	98 85       	ldd	r25, Y+8	; 0x08
     7a6:	d8 d2       	rcall	.+1456   	; 0xd58 <__cmpsf2>
     7a8:	88 23       	and	r24, r24
     7aa:	1c f4       	brge	.+6      	; 0x7b2 <nRF_2401_reg_write_s+0x92>
		__ticks = 1;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	8d 87       	std	Y+13, r24	; 0x0d
     7b0:	a7 c0       	rjmp	.+334    	; 0x900 <nRF_2401_reg_write_s+0x1e0>
	else if (__tmp2 > 65535)
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	3f ef       	ldi	r19, 0xFF	; 255
     7b6:	4f e7       	ldi	r20, 0x7F	; 127
     7b8:	57 e4       	ldi	r21, 0x47	; 71
     7ba:	69 85       	ldd	r22, Y+9	; 0x09
     7bc:	7a 85       	ldd	r23, Y+10	; 0x0a
     7be:	8b 85       	ldd	r24, Y+11	; 0x0b
     7c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     7c2:	d7 d3       	rcall	.+1966   	; 0xf72 <__gesf2>
     7c4:	18 16       	cp	r1, r24
     7c6:	0c f0       	brlt	.+2      	; 0x7ca <nRF_2401_reg_write_s+0xaa>
     7c8:	74 c0       	rjmp	.+232    	; 0x8b2 <nRF_2401_reg_write_s+0x192>
	{
		_delay_ms(__us / 1000.0);
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	4a e7       	ldi	r20, 0x7A	; 122
     7d0:	54 e4       	ldi	r21, 0x44	; 68
     7d2:	69 81       	ldd	r22, Y+1	; 0x01
     7d4:	7a 81       	ldd	r23, Y+2	; 0x02
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	9c 81       	ldd	r25, Y+4	; 0x04
     7da:	c2 d2       	rcall	.+1412   	; 0xd60 <__divsf3>
     7dc:	dc 01       	movw	r26, r24
     7de:	cb 01       	movw	r24, r22
     7e0:	8e 87       	std	Y+14, r24	; 0x0e
     7e2:	9f 87       	std	Y+15, r25	; 0x0f
     7e4:	a8 8b       	std	Y+16, r26	; 0x10
     7e6:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	4a ef       	ldi	r20, 0xFA	; 250
     7ee:	54 e4       	ldi	r21, 0x44	; 68
     7f0:	6e 85       	ldd	r22, Y+14	; 0x0e
     7f2:	7f 85       	ldd	r23, Y+15	; 0x0f
     7f4:	88 89       	ldd	r24, Y+16	; 0x10
     7f6:	99 89       	ldd	r25, Y+17	; 0x11
     7f8:	c0 d3       	rcall	.+1920   	; 0xf7a <__mulsf3>
     7fa:	dc 01       	movw	r26, r24
     7fc:	cb 01       	movw	r24, r22
     7fe:	8a 8b       	std	Y+18, r24	; 0x12
     800:	9b 8b       	std	Y+19, r25	; 0x13
     802:	ac 8b       	std	Y+20, r26	; 0x14
     804:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	40 e8       	ldi	r20, 0x80	; 128
     80c:	5f e3       	ldi	r21, 0x3F	; 63
     80e:	6a 89       	ldd	r22, Y+18	; 0x12
     810:	7b 89       	ldd	r23, Y+19	; 0x13
     812:	8c 89       	ldd	r24, Y+20	; 0x14
     814:	9d 89       	ldd	r25, Y+21	; 0x15
     816:	a0 d2       	rcall	.+1344   	; 0xd58 <__cmpsf2>
     818:	88 23       	and	r24, r24
     81a:	2c f4       	brge	.+10     	; 0x826 <nRF_2401_reg_write_s+0x106>
		__ticks = 1;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	9f 8b       	std	Y+23, r25	; 0x17
     822:	8e 8b       	std	Y+22, r24	; 0x16
     824:	3b c0       	rjmp	.+118    	; 0x89c <nRF_2401_reg_write_s+0x17c>
	else if (__tmp > 65535)
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	3f ef       	ldi	r19, 0xFF	; 255
     82a:	4f e7       	ldi	r20, 0x7F	; 127
     82c:	57 e4       	ldi	r21, 0x47	; 71
     82e:	6a 89       	ldd	r22, Y+18	; 0x12
     830:	7b 89       	ldd	r23, Y+19	; 0x13
     832:	8c 89       	ldd	r24, Y+20	; 0x14
     834:	9d 89       	ldd	r25, Y+21	; 0x15
     836:	9d d3       	rcall	.+1850   	; 0xf72 <__gesf2>
     838:	18 16       	cp	r1, r24
     83a:	3c f5       	brge	.+78     	; 0x88a <nRF_2401_reg_write_s+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e2       	ldi	r20, 0x20	; 32
     842:	51 e4       	ldi	r21, 0x41	; 65
     844:	6e 85       	ldd	r22, Y+14	; 0x0e
     846:	7f 85       	ldd	r23, Y+15	; 0x0f
     848:	88 89       	ldd	r24, Y+16	; 0x10
     84a:	99 89       	ldd	r25, Y+17	; 0x11
     84c:	96 d3       	rcall	.+1836   	; 0xf7a <__mulsf3>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	bc 01       	movw	r22, r24
     854:	cd 01       	movw	r24, r26
     856:	ec d2       	rcall	.+1496   	; 0xe30 <__fixunssfsi>
     858:	dc 01       	movw	r26, r24
     85a:	cb 01       	movw	r24, r22
     85c:	9f 8b       	std	Y+23, r25	; 0x17
     85e:	8e 8b       	std	Y+22, r24	; 0x16
     860:	0f c0       	rjmp	.+30     	; 0x880 <nRF_2401_reg_write_s+0x160>
     862:	88 ec       	ldi	r24, 0xC8	; 200
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	99 8f       	std	Y+25, r25	; 0x19
     868:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     86a:	88 8d       	ldd	r24, Y+24	; 0x18
     86c:	99 8d       	ldd	r25, Y+25	; 0x19
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <nRF_2401_reg_write_s+0x14e>
     872:	99 8f       	std	Y+25, r25	; 0x19
     874:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     876:	8e 89       	ldd	r24, Y+22	; 0x16
     878:	9f 89       	ldd	r25, Y+23	; 0x17
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	9f 8b       	std	Y+23, r25	; 0x17
     87e:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     880:	8e 89       	ldd	r24, Y+22	; 0x16
     882:	9f 89       	ldd	r25, Y+23	; 0x17
     884:	89 2b       	or	r24, r25
     886:	69 f7       	brne	.-38     	; 0x862 <nRF_2401_reg_write_s+0x142>
     888:	3b c0       	rjmp	.+118    	; 0x900 <nRF_2401_reg_write_s+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     88a:	6a 89       	ldd	r22, Y+18	; 0x12
     88c:	7b 89       	ldd	r23, Y+19	; 0x13
     88e:	8c 89       	ldd	r24, Y+20	; 0x14
     890:	9d 89       	ldd	r25, Y+21	; 0x15
     892:	ce d2       	rcall	.+1436   	; 0xe30 <__fixunssfsi>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	9f 8b       	std	Y+23, r25	; 0x17
     89a:	8e 8b       	std	Y+22, r24	; 0x16
     89c:	8e 89       	ldd	r24, Y+22	; 0x16
     89e:	9f 89       	ldd	r25, Y+23	; 0x17
     8a0:	9b 8f       	std	Y+27, r25	; 0x1b
     8a2:	8a 8f       	std	Y+26, r24	; 0x1a
     8a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <nRF_2401_reg_write_s+0x188>
     8ac:	9b 8f       	std	Y+27, r25	; 0x1b
     8ae:	8a 8f       	std	Y+26, r24	; 0x1a
     8b0:	27 c0       	rjmp	.+78     	; 0x900 <nRF_2401_reg_write_s+0x1e0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	4f e7       	ldi	r20, 0x7F	; 127
     8b8:	53 e4       	ldi	r21, 0x43	; 67
     8ba:	6d 81       	ldd	r22, Y+5	; 0x05
     8bc:	7e 81       	ldd	r23, Y+6	; 0x06
     8be:	8f 81       	ldd	r24, Y+7	; 0x07
     8c0:	98 85       	ldd	r25, Y+8	; 0x08
     8c2:	57 d3       	rcall	.+1710   	; 0xf72 <__gesf2>
     8c4:	18 16       	cp	r1, r24
     8c6:	a4 f4       	brge	.+40     	; 0x8f0 <nRF_2401_reg_write_s+0x1d0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     8c8:	69 85       	ldd	r22, Y+9	; 0x09
     8ca:	7a 85       	ldd	r23, Y+10	; 0x0a
     8cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     8ce:	9c 85       	ldd	r25, Y+12	; 0x0c
     8d0:	af d2       	rcall	.+1374   	; 0xe30 <__fixunssfsi>
     8d2:	dc 01       	movw	r26, r24
     8d4:	cb 01       	movw	r24, r22
     8d6:	9d 8f       	std	Y+29, r25	; 0x1d
     8d8:	8c 8f       	std	Y+28, r24	; 0x1c
     8da:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     8de:	9f 8f       	std	Y+31, r25	; 0x1f
     8e0:	8e 8f       	std	Y+30, r24	; 0x1e
     8e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <nRF_2401_reg_write_s+0x1c6>
     8ea:	9f 8f       	std	Y+31, r25	; 0x1f
     8ec:	8e 8f       	std	Y+30, r24	; 0x1e
     8ee:	0e c0       	rjmp	.+28     	; 0x90c <nRF_2401_reg_write_s+0x1ec>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     8f0:	6d 81       	ldd	r22, Y+5	; 0x05
     8f2:	7e 81       	ldd	r23, Y+6	; 0x06
     8f4:	8f 81       	ldd	r24, Y+7	; 0x07
     8f6:	98 85       	ldd	r25, Y+8	; 0x08
     8f8:	9b d2       	rcall	.+1334   	; 0xe30 <__fixunssfsi>
     8fa:	dc 01       	movw	r26, r24
     8fc:	cb 01       	movw	r24, r22
     8fe:	8d 87       	std	Y+13, r24	; 0x0d
     900:	8d 85       	ldd	r24, Y+13	; 0x0d
     902:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     904:	88 a1       	ldd	r24, Y+32	; 0x20
     906:	8a 95       	dec	r24
     908:	f1 f7       	brne	.-4      	; 0x906 <nRF_2401_reg_write_s+0x1e6>
     90a:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(10);
	spi_transfer(W_REGISTER + reg);
     90c:	89 a1       	ldd	r24, Y+33	; 0x21
     90e:	80 5e       	subi	r24, 0xE0	; 224
     910:	3a d1       	rcall	.+628    	; 0xb86 <spi_transfer>
	spi_transfer(data);
     912:	8a a1       	ldd	r24, Y+34	; 0x22
     914:	38 d1       	rcall	.+624    	; 0xb86 <spi_transfer>
	SETBIT(PORTB, CSN); //Deactivate Chip Selection on nRF2401
     916:	85 e2       	ldi	r24, 0x25	; 37
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	25 e2       	ldi	r18, 0x25	; 37
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	f9 01       	movw	r30, r18
     920:	20 81       	ld	r18, Z
     922:	24 60       	ori	r18, 0x04	; 4
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18
}
     928:	a2 96       	adiw	r28, 0x22	; 34
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	de bf       	out	0x3e, r29	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	cd bf       	out	0x3d, r28	; 61
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <nRF_2401_reg_read>:

uint8_t nRF_2401_reg_read(uint8_t reg) {
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	a2 97       	sbiw	r28, 0x22	; 34
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	8a a3       	std	Y+34, r24	; 0x22
	CLEARBIT(PORTB, CSN); //Activate Chip Selection on nRF2401
     950:	85 e2       	ldi	r24, 0x25	; 37
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	25 e2       	ldi	r18, 0x25	; 37
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	f9 01       	movw	r30, r18
     95a:	20 81       	ld	r18, Z
     95c:	2b 7f       	andi	r18, 0xFB	; 251
     95e:	fc 01       	movw	r30, r24
     960:	20 83       	st	Z, r18
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	a0 e2       	ldi	r26, 0x20	; 32
     968:	b1 e4       	ldi	r27, 0x41	; 65
     96a:	8a 83       	std	Y+2, r24	; 0x02
     96c:	9b 83       	std	Y+3, r25	; 0x03
     96e:	ac 83       	std	Y+4, r26	; 0x04
     970:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     972:	2b ea       	ldi	r18, 0xAB	; 171
     974:	3a ea       	ldi	r19, 0xAA	; 170
     976:	4a e2       	ldi	r20, 0x2A	; 42
     978:	50 e4       	ldi	r21, 0x40	; 64
     97a:	6a 81       	ldd	r22, Y+2	; 0x02
     97c:	7b 81       	ldd	r23, Y+3	; 0x03
     97e:	8c 81       	ldd	r24, Y+4	; 0x04
     980:	9d 81       	ldd	r25, Y+5	; 0x05
     982:	fb d2       	rcall	.+1526   	; 0xf7a <__mulsf3>
     984:	dc 01       	movw	r26, r24
     986:	cb 01       	movw	r24, r22
     988:	8e 83       	std	Y+6, r24	; 0x06
     98a:	9f 83       	std	Y+7, r25	; 0x07
     98c:	a8 87       	std	Y+8, r26	; 0x08
     98e:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
     990:	8a 81       	ldd	r24, Y+2	; 0x02
     992:	9b 81       	ldd	r25, Y+3	; 0x03
     994:	ac 81       	ldd	r26, Y+4	; 0x04
     996:	bd 81       	ldd	r27, Y+5	; 0x05
     998:	9c 01       	movw	r18, r24
     99a:	ad 01       	movw	r20, r26
     99c:	bc 01       	movw	r22, r24
     99e:	cd 01       	movw	r24, r26
     9a0:	77 d1       	rcall	.+750    	; 0xc90 <__addsf3>
     9a2:	dc 01       	movw	r26, r24
     9a4:	cb 01       	movw	r24, r22
     9a6:	8a 87       	std	Y+10, r24	; 0x0a
     9a8:	9b 87       	std	Y+11, r25	; 0x0b
     9aa:	ac 87       	std	Y+12, r26	; 0x0c
     9ac:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e8       	ldi	r20, 0x80	; 128
     9b4:	5f e3       	ldi	r21, 0x3F	; 63
     9b6:	6e 81       	ldd	r22, Y+6	; 0x06
     9b8:	7f 81       	ldd	r23, Y+7	; 0x07
     9ba:	88 85       	ldd	r24, Y+8	; 0x08
     9bc:	99 85       	ldd	r25, Y+9	; 0x09
     9be:	cc d1       	rcall	.+920    	; 0xd58 <__cmpsf2>
     9c0:	88 23       	and	r24, r24
     9c2:	1c f4       	brge	.+6      	; 0x9ca <nRF_2401_reg_read+0x90>
		__ticks = 1;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	8e 87       	std	Y+14, r24	; 0x0e
     9c8:	a7 c0       	rjmp	.+334    	; 0xb18 <nRF_2401_reg_read+0x1de>
	else if (__tmp2 > 65535)
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	3f ef       	ldi	r19, 0xFF	; 255
     9ce:	4f e7       	ldi	r20, 0x7F	; 127
     9d0:	57 e4       	ldi	r21, 0x47	; 71
     9d2:	6a 85       	ldd	r22, Y+10	; 0x0a
     9d4:	7b 85       	ldd	r23, Y+11	; 0x0b
     9d6:	8c 85       	ldd	r24, Y+12	; 0x0c
     9d8:	9d 85       	ldd	r25, Y+13	; 0x0d
     9da:	cb d2       	rcall	.+1430   	; 0xf72 <__gesf2>
     9dc:	18 16       	cp	r1, r24
     9de:	0c f0       	brlt	.+2      	; 0x9e2 <nRF_2401_reg_read+0xa8>
     9e0:	74 c0       	rjmp	.+232    	; 0xaca <nRF_2401_reg_read+0x190>
	{
		_delay_ms(__us / 1000.0);
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	4a e7       	ldi	r20, 0x7A	; 122
     9e8:	54 e4       	ldi	r21, 0x44	; 68
     9ea:	6a 81       	ldd	r22, Y+2	; 0x02
     9ec:	7b 81       	ldd	r23, Y+3	; 0x03
     9ee:	8c 81       	ldd	r24, Y+4	; 0x04
     9f0:	9d 81       	ldd	r25, Y+5	; 0x05
     9f2:	b6 d1       	rcall	.+876    	; 0xd60 <__divsf3>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	8f 87       	std	Y+15, r24	; 0x0f
     9fa:	98 8b       	std	Y+16, r25	; 0x10
     9fc:	a9 8b       	std	Y+17, r26	; 0x11
     9fe:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	4a ef       	ldi	r20, 0xFA	; 250
     a06:	54 e4       	ldi	r21, 0x44	; 68
     a08:	6f 85       	ldd	r22, Y+15	; 0x0f
     a0a:	78 89       	ldd	r23, Y+16	; 0x10
     a0c:	89 89       	ldd	r24, Y+17	; 0x11
     a0e:	9a 89       	ldd	r25, Y+18	; 0x12
     a10:	b4 d2       	rcall	.+1384   	; 0xf7a <__mulsf3>
     a12:	dc 01       	movw	r26, r24
     a14:	cb 01       	movw	r24, r22
     a16:	8b 8b       	std	Y+19, r24	; 0x13
     a18:	9c 8b       	std	Y+20, r25	; 0x14
     a1a:	ad 8b       	std	Y+21, r26	; 0x15
     a1c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e8       	ldi	r20, 0x80	; 128
     a24:	5f e3       	ldi	r21, 0x3F	; 63
     a26:	6b 89       	ldd	r22, Y+19	; 0x13
     a28:	7c 89       	ldd	r23, Y+20	; 0x14
     a2a:	8d 89       	ldd	r24, Y+21	; 0x15
     a2c:	9e 89       	ldd	r25, Y+22	; 0x16
     a2e:	94 d1       	rcall	.+808    	; 0xd58 <__cmpsf2>
     a30:	88 23       	and	r24, r24
     a32:	2c f4       	brge	.+10     	; 0xa3e <nRF_2401_reg_read+0x104>
		__ticks = 1;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	98 8f       	std	Y+24, r25	; 0x18
     a3a:	8f 8b       	std	Y+23, r24	; 0x17
     a3c:	3b c0       	rjmp	.+118    	; 0xab4 <nRF_2401_reg_read+0x17a>
	else if (__tmp > 65535)
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	3f ef       	ldi	r19, 0xFF	; 255
     a42:	4f e7       	ldi	r20, 0x7F	; 127
     a44:	57 e4       	ldi	r21, 0x47	; 71
     a46:	6b 89       	ldd	r22, Y+19	; 0x13
     a48:	7c 89       	ldd	r23, Y+20	; 0x14
     a4a:	8d 89       	ldd	r24, Y+21	; 0x15
     a4c:	9e 89       	ldd	r25, Y+22	; 0x16
     a4e:	91 d2       	rcall	.+1314   	; 0xf72 <__gesf2>
     a50:	18 16       	cp	r1, r24
     a52:	3c f5       	brge	.+78     	; 0xaa2 <nRF_2401_reg_read+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	40 e2       	ldi	r20, 0x20	; 32
     a5a:	51 e4       	ldi	r21, 0x41	; 65
     a5c:	6f 85       	ldd	r22, Y+15	; 0x0f
     a5e:	78 89       	ldd	r23, Y+16	; 0x10
     a60:	89 89       	ldd	r24, Y+17	; 0x11
     a62:	9a 89       	ldd	r25, Y+18	; 0x12
     a64:	8a d2       	rcall	.+1300   	; 0xf7a <__mulsf3>
     a66:	dc 01       	movw	r26, r24
     a68:	cb 01       	movw	r24, r22
     a6a:	bc 01       	movw	r22, r24
     a6c:	cd 01       	movw	r24, r26
     a6e:	e0 d1       	rcall	.+960    	; 0xe30 <__fixunssfsi>
     a70:	dc 01       	movw	r26, r24
     a72:	cb 01       	movw	r24, r22
     a74:	98 8f       	std	Y+24, r25	; 0x18
     a76:	8f 8b       	std	Y+23, r24	; 0x17
     a78:	0f c0       	rjmp	.+30     	; 0xa98 <nRF_2401_reg_read+0x15e>
     a7a:	88 ec       	ldi	r24, 0xC8	; 200
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	9a 8f       	std	Y+26, r25	; 0x1a
     a80:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a82:	89 8d       	ldd	r24, Y+25	; 0x19
     a84:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	f1 f7       	brne	.-4      	; 0xa86 <nRF_2401_reg_read+0x14c>
     a8a:	9a 8f       	std	Y+26, r25	; 0x1a
     a8c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a8e:	8f 89       	ldd	r24, Y+23	; 0x17
     a90:	98 8d       	ldd	r25, Y+24	; 0x18
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	98 8f       	std	Y+24, r25	; 0x18
     a96:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a98:	8f 89       	ldd	r24, Y+23	; 0x17
     a9a:	98 8d       	ldd	r25, Y+24	; 0x18
     a9c:	89 2b       	or	r24, r25
     a9e:	69 f7       	brne	.-38     	; 0xa7a <nRF_2401_reg_read+0x140>
     aa0:	3b c0       	rjmp	.+118    	; 0xb18 <nRF_2401_reg_read+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aa2:	6b 89       	ldd	r22, Y+19	; 0x13
     aa4:	7c 89       	ldd	r23, Y+20	; 0x14
     aa6:	8d 89       	ldd	r24, Y+21	; 0x15
     aa8:	9e 89       	ldd	r25, Y+22	; 0x16
     aaa:	c2 d1       	rcall	.+900    	; 0xe30 <__fixunssfsi>
     aac:	dc 01       	movw	r26, r24
     aae:	cb 01       	movw	r24, r22
     ab0:	98 8f       	std	Y+24, r25	; 0x18
     ab2:	8f 8b       	std	Y+23, r24	; 0x17
     ab4:	8f 89       	ldd	r24, Y+23	; 0x17
     ab6:	98 8d       	ldd	r25, Y+24	; 0x18
     ab8:	9c 8f       	std	Y+28, r25	; 0x1c
     aba:	8b 8f       	std	Y+27, r24	; 0x1b
     abc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     abe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <nRF_2401_reg_read+0x186>
     ac4:	9c 8f       	std	Y+28, r25	; 0x1c
     ac6:	8b 8f       	std	Y+27, r24	; 0x1b
     ac8:	27 c0       	rjmp	.+78     	; 0xb18 <nRF_2401_reg_read+0x1de>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	4f e7       	ldi	r20, 0x7F	; 127
     ad0:	53 e4       	ldi	r21, 0x43	; 67
     ad2:	6e 81       	ldd	r22, Y+6	; 0x06
     ad4:	7f 81       	ldd	r23, Y+7	; 0x07
     ad6:	88 85       	ldd	r24, Y+8	; 0x08
     ad8:	99 85       	ldd	r25, Y+9	; 0x09
     ada:	4b d2       	rcall	.+1174   	; 0xf72 <__gesf2>
     adc:	18 16       	cp	r1, r24
     ade:	a4 f4       	brge	.+40     	; 0xb08 <nRF_2401_reg_read+0x1ce>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     ae0:	6a 85       	ldd	r22, Y+10	; 0x0a
     ae2:	7b 85       	ldd	r23, Y+11	; 0x0b
     ae4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ae6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ae8:	a3 d1       	rcall	.+838    	; 0xe30 <__fixunssfsi>
     aea:	dc 01       	movw	r26, r24
     aec:	cb 01       	movw	r24, r22
     aee:	9e 8f       	std	Y+30, r25	; 0x1e
     af0:	8d 8f       	std	Y+29, r24	; 0x1d
     af2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     af4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     af6:	98 a3       	std	Y+32, r25	; 0x20
     af8:	8f 8f       	std	Y+31, r24	; 0x1f
     afa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     afc:	98 a1       	ldd	r25, Y+32	; 0x20
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <nRF_2401_reg_read+0x1c4>
     b02:	98 a3       	std	Y+32, r25	; 0x20
     b04:	8f 8f       	std	Y+31, r24	; 0x1f
     b06:	0e c0       	rjmp	.+28     	; 0xb24 <nRF_2401_reg_read+0x1ea>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b08:	6e 81       	ldd	r22, Y+6	; 0x06
     b0a:	7f 81       	ldd	r23, Y+7	; 0x07
     b0c:	88 85       	ldd	r24, Y+8	; 0x08
     b0e:	99 85       	ldd	r25, Y+9	; 0x09
     b10:	8f d1       	rcall	.+798    	; 0xe30 <__fixunssfsi>
     b12:	dc 01       	movw	r26, r24
     b14:	cb 01       	movw	r24, r22
     b16:	8e 87       	std	Y+14, r24	; 0x0e
     b18:	8e 85       	ldd	r24, Y+14	; 0x0e
     b1a:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b1c:	89 a1       	ldd	r24, Y+33	; 0x21
     b1e:	8a 95       	dec	r24
     b20:	f1 f7       	brne	.-4      	; 0xb1e <nRF_2401_reg_read+0x1e4>
     b22:	89 a3       	std	Y+33, r24	; 0x21
	_delay_us(10);
	spi_transfer(R_REGISTER + reg);
     b24:	8a a1       	ldd	r24, Y+34	; 0x22
     b26:	2f d0       	rcall	.+94     	; 0xb86 <spi_transfer>
	uint8_t result = spi_transfer(NOP);
     b28:	8f ef       	ldi	r24, 0xFF	; 255
     b2a:	2d d0       	rcall	.+90     	; 0xb86 <spi_transfer>
     b2c:	89 83       	std	Y+1, r24	; 0x01
	SETBIT(PORTB, CSN); //Deactivate Chip Selection on nRF2401
     b2e:	85 e2       	ldi	r24, 0x25	; 37
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	25 e2       	ldi	r18, 0x25	; 37
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	f9 01       	movw	r30, r18
     b38:	20 81       	ld	r18, Z
     b3a:	24 60       	ori	r18, 0x04	; 4
     b3c:	fc 01       	movw	r30, r24
     b3e:	20 83       	st	Z, r18
	return result;
     b40:	89 81       	ldd	r24, Y+1	; 0x01
}
     b42:	a2 96       	adiw	r28, 0x22	; 34
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	08 95       	ret

00000b54 <spi_init>:
 *      Author: t400
 */

#include "spi.h"

void spi_init(){
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1 << DD_SCK) | (1 << DD_MOSI) | (1 << DD_CSN);
     b5c:	84 e2       	ldi	r24, 0x24	; 36
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	24 e2       	ldi	r18, 0x24	; 36
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	f9 01       	movw	r30, r18
     b66:	20 81       	ld	r18, Z
     b68:	2c 62       	ori	r18, 0x2C	; 44
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 83       	st	Z, r18
	SPCR |= (1 << SPR1) | ( 1 << SPR0 ) | (1 << MSTR) | (1 << SPIE);
     b6e:	8c e4       	ldi	r24, 0x4C	; 76
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	2c e4       	ldi	r18, 0x4C	; 76
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	f9 01       	movw	r30, r18
     b78:	20 81       	ld	r18, Z
     b7a:	23 69       	ori	r18, 0x93	; 147
     b7c:	fc 01       	movw	r30, r24
     b7e:	20 83       	st	Z, r18
}
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <spi_transfer>:

uint8_t spi_transfer(uint8_t data ){
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	1f 92       	push	r1
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	89 83       	std	Y+1, r24	; 0x01
	while(SPSR & BIT(SPIF) ); //wait until the previous transmission complete
     b92:	00 00       	nop
     b94:	8d e4       	ldi	r24, 0x4D	; 77
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	fc 01       	movw	r30, r24
     b9a:	80 81       	ld	r24, Z
     b9c:	88 23       	and	r24, r24
     b9e:	d4 f3       	brlt	.-12     	; 0xb94 <spi_transfer+0xe>
	SPDR = data;
     ba0:	8e e4       	ldi	r24, 0x4E	; 78
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	29 81       	ldd	r18, Y+1	; 0x01
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 83       	st	Z, r18
	while(SPSR & BIT(SPIF) ); // wait until this transmission is complete
     baa:	00 00       	nop
     bac:	8d e4       	ldi	r24, 0x4D	; 77
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	fc 01       	movw	r30, r24
     bb2:	80 81       	ld	r24, Z
     bb4:	88 23       	and	r24, r24
     bb6:	d4 f3       	brlt	.-12     	; 0xbac <spi_transfer+0x26>
	return SPDR;
     bb8:	8e e4       	ldi	r24, 0x4E	; 78
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	fc 01       	movw	r30, r24
     bbe:	80 81       	ld	r24, Z
}
     bc0:	0f 90       	pop	r0
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <UARTInit>:
 *      Author: t400
 */
#include "uart.h"

void UARTInit()  // UART beallitasa
{
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62

	UBRR0L = UBRR_VAL; // UBRR_ERTEK also 8 bitjenek betoltese az UBRRL regiszterbe
     bd0:	84 ec       	ldi	r24, 0xC4	; 196
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	2f ec       	ldi	r18, 0xCF	; 207
     bd6:	fc 01       	movw	r30, r24
     bd8:	20 83       	st	Z, r18
	UBRR0H = (UBRR_VAL >> 8); // UBRR_ERTEK felso 8 bitjenek betoltese az UBRRH regiszterbe
     bda:	85 ec       	ldi	r24, 0xC5	; 197
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	fc 01       	movw	r30, r24
     be0:	10 82       	st	Z, r1
	// UCSR0A |= (1<<U2X0);

	//Ado es Vevo aramkorok bekapcsolasa

	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     be2:	81 ec       	ldi	r24, 0xC1	; 193
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	28 e1       	ldi	r18, 0x18	; 24
     be8:	fc 01       	movw	r30, r24
     bea:	20 83       	st	Z, r18
	UCSR0C = (3 << UCSZ00);
     bec:	82 ec       	ldi	r24, 0xC2	; 194
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	26 e0       	ldi	r18, 0x06	; 6
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 83       	st	Z, r18
}
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <UARTReceive>:
uint8_t  UARTReceive()
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSR0A & (1 << RXC0))){} // Varakozas amig nincs uj bejovo adat
     c04:	00 00       	nop
     c06:	80 ec       	ldi	r24, 0xC0	; 192
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	fc 01       	movw	r30, r24
     c0c:	80 81       	ld	r24, Z
     c0e:	88 23       	and	r24, r24
     c10:	d4 f7       	brge	.-12     	; 0xc06 <UARTReceive+0xa>
	return UDR0;
     c12:	86 ec       	ldi	r24, 0xC6	; 198
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	fc 01       	movw	r30, r24
     c18:	80 81       	ld	r24, Z
}
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <UARTSendByte>:

void UARTSendByte(uint8_t data) // Ez a fuggveny a kuldendo adatot beirja az UDR regiszter kimeno pufferjebe
{
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	1f 92       	push	r1
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0))){} // Varakozas amig az Ado kesz nem lesz az adatkuldesre
     c2c:	00 00       	nop
     c2e:	80 ec       	ldi	r24, 0xC0	; 192
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	fc 01       	movw	r30, r24
     c34:	80 81       	ld	r24, Z
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	80 72       	andi	r24, 0x20	; 32
     c3c:	99 27       	eor	r25, r25
     c3e:	89 2b       	or	r24, r25
     c40:	b1 f3       	breq	.-20     	; 0xc2e <UARTSendByte+0xe>
	UDR0 = data;
     c42:	86 ec       	ldi	r24, 0xC6	; 198
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	29 81       	ldd	r18, Y+1	; 0x01
     c48:	fc 01       	movw	r30, r24
     c4a:	20 83       	st	Z, r18
}
     c4c:	0f 90       	pop	r0
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <UARTSendString>:

void UARTSendString(char * str)
{
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	00 d0       	rcall	.+0      	; 0xc5a <UARTSendString+0x6>
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	89 83       	std	Y+1, r24	; 0x01
	while (*str)
     c62:	0a c0       	rjmp	.+20     	; 0xc78 <UARTSendString+0x24>
	{
		UARTSendByte(*str);
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	fc 01       	movw	r30, r24
     c6a:	80 81       	ld	r24, Z
     c6c:	d9 df       	rcall	.-78     	; 0xc20 <UARTSendByte>
		str++;
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	9a 83       	std	Y+2, r25	; 0x02
     c76:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = data;
}

void UARTSendString(char * str)
{
	while (*str)
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	9a 81       	ldd	r25, Y+2	; 0x02
     c7c:	fc 01       	movw	r30, r24
     c7e:	80 81       	ld	r24, Z
     c80:	88 23       	and	r24, r24
     c82:	81 f7       	brne	.-32     	; 0xc64 <UARTSendString+0x10>
	{
		UARTSendByte(*str);
		str++;
	}
}
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <__subsf3>:
     c8e:	50 58       	subi	r21, 0x80	; 128

00000c90 <__addsf3>:
     c90:	bb 27       	eor	r27, r27
     c92:	aa 27       	eor	r26, r26
     c94:	0e d0       	rcall	.+28     	; 0xcb2 <__addsf3x>
     c96:	33 c1       	rjmp	.+614    	; 0xefe <__fp_round>
     c98:	24 d1       	rcall	.+584    	; 0xee2 <__fp_pscA>
     c9a:	30 f0       	brcs	.+12     	; 0xca8 <__addsf3+0x18>
     c9c:	29 d1       	rcall	.+594    	; 0xef0 <__fp_pscB>
     c9e:	20 f0       	brcs	.+8      	; 0xca8 <__addsf3+0x18>
     ca0:	31 f4       	brne	.+12     	; 0xcae <__addsf3+0x1e>
     ca2:	9f 3f       	cpi	r25, 0xFF	; 255
     ca4:	11 f4       	brne	.+4      	; 0xcaa <__addsf3+0x1a>
     ca6:	1e f4       	brtc	.+6      	; 0xcae <__addsf3+0x1e>
     ca8:	19 c1       	rjmp	.+562    	; 0xedc <__fp_nan>
     caa:	0e f4       	brtc	.+2      	; 0xcae <__addsf3+0x1e>
     cac:	e0 95       	com	r30
     cae:	e7 fb       	bst	r30, 7
     cb0:	0f c1       	rjmp	.+542    	; 0xed0 <__fp_inf>

00000cb2 <__addsf3x>:
     cb2:	e9 2f       	mov	r30, r25
     cb4:	35 d1       	rcall	.+618    	; 0xf20 <__fp_split3>
     cb6:	80 f3       	brcs	.-32     	; 0xc98 <__addsf3+0x8>
     cb8:	ba 17       	cp	r27, r26
     cba:	62 07       	cpc	r22, r18
     cbc:	73 07       	cpc	r23, r19
     cbe:	84 07       	cpc	r24, r20
     cc0:	95 07       	cpc	r25, r21
     cc2:	18 f0       	brcs	.+6      	; 0xcca <__addsf3x+0x18>
     cc4:	71 f4       	brne	.+28     	; 0xce2 <__addsf3x+0x30>
     cc6:	9e f5       	brtc	.+102    	; 0xd2e <__addsf3x+0x7c>
     cc8:	4d c1       	rjmp	.+666    	; 0xf64 <__fp_zero>
     cca:	0e f4       	brtc	.+2      	; 0xcce <__addsf3x+0x1c>
     ccc:	e0 95       	com	r30
     cce:	0b 2e       	mov	r0, r27
     cd0:	ba 2f       	mov	r27, r26
     cd2:	a0 2d       	mov	r26, r0
     cd4:	0b 01       	movw	r0, r22
     cd6:	b9 01       	movw	r22, r18
     cd8:	90 01       	movw	r18, r0
     cda:	0c 01       	movw	r0, r24
     cdc:	ca 01       	movw	r24, r20
     cde:	a0 01       	movw	r20, r0
     ce0:	11 24       	eor	r1, r1
     ce2:	ff 27       	eor	r31, r31
     ce4:	59 1b       	sub	r21, r25
     ce6:	99 f0       	breq	.+38     	; 0xd0e <__addsf3x+0x5c>
     ce8:	59 3f       	cpi	r21, 0xF9	; 249
     cea:	50 f4       	brcc	.+20     	; 0xd00 <__addsf3x+0x4e>
     cec:	50 3e       	cpi	r21, 0xE0	; 224
     cee:	68 f1       	brcs	.+90     	; 0xd4a <__addsf3x+0x98>
     cf0:	1a 16       	cp	r1, r26
     cf2:	f0 40       	sbci	r31, 0x00	; 0
     cf4:	a2 2f       	mov	r26, r18
     cf6:	23 2f       	mov	r18, r19
     cf8:	34 2f       	mov	r19, r20
     cfa:	44 27       	eor	r20, r20
     cfc:	58 5f       	subi	r21, 0xF8	; 248
     cfe:	f3 cf       	rjmp	.-26     	; 0xce6 <__addsf3x+0x34>
     d00:	46 95       	lsr	r20
     d02:	37 95       	ror	r19
     d04:	27 95       	ror	r18
     d06:	a7 95       	ror	r26
     d08:	f0 40       	sbci	r31, 0x00	; 0
     d0a:	53 95       	inc	r21
     d0c:	c9 f7       	brne	.-14     	; 0xd00 <__addsf3x+0x4e>
     d0e:	7e f4       	brtc	.+30     	; 0xd2e <__addsf3x+0x7c>
     d10:	1f 16       	cp	r1, r31
     d12:	ba 0b       	sbc	r27, r26
     d14:	62 0b       	sbc	r22, r18
     d16:	73 0b       	sbc	r23, r19
     d18:	84 0b       	sbc	r24, r20
     d1a:	ba f0       	brmi	.+46     	; 0xd4a <__addsf3x+0x98>
     d1c:	91 50       	subi	r25, 0x01	; 1
     d1e:	a1 f0       	breq	.+40     	; 0xd48 <__addsf3x+0x96>
     d20:	ff 0f       	add	r31, r31
     d22:	bb 1f       	adc	r27, r27
     d24:	66 1f       	adc	r22, r22
     d26:	77 1f       	adc	r23, r23
     d28:	88 1f       	adc	r24, r24
     d2a:	c2 f7       	brpl	.-16     	; 0xd1c <__addsf3x+0x6a>
     d2c:	0e c0       	rjmp	.+28     	; 0xd4a <__addsf3x+0x98>
     d2e:	ba 0f       	add	r27, r26
     d30:	62 1f       	adc	r22, r18
     d32:	73 1f       	adc	r23, r19
     d34:	84 1f       	adc	r24, r20
     d36:	48 f4       	brcc	.+18     	; 0xd4a <__addsf3x+0x98>
     d38:	87 95       	ror	r24
     d3a:	77 95       	ror	r23
     d3c:	67 95       	ror	r22
     d3e:	b7 95       	ror	r27
     d40:	f7 95       	ror	r31
     d42:	9e 3f       	cpi	r25, 0xFE	; 254
     d44:	08 f0       	brcs	.+2      	; 0xd48 <__addsf3x+0x96>
     d46:	b3 cf       	rjmp	.-154    	; 0xcae <__addsf3+0x1e>
     d48:	93 95       	inc	r25
     d4a:	88 0f       	add	r24, r24
     d4c:	08 f0       	brcs	.+2      	; 0xd50 <__addsf3x+0x9e>
     d4e:	99 27       	eor	r25, r25
     d50:	ee 0f       	add	r30, r30
     d52:	97 95       	ror	r25
     d54:	87 95       	ror	r24
     d56:	08 95       	ret

00000d58 <__cmpsf2>:
     d58:	97 d0       	rcall	.+302    	; 0xe88 <__fp_cmp>
     d5a:	08 f4       	brcc	.+2      	; 0xd5e <__cmpsf2+0x6>
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	08 95       	ret

00000d60 <__divsf3>:
     d60:	0c d0       	rcall	.+24     	; 0xd7a <__divsf3x>
     d62:	cd c0       	rjmp	.+410    	; 0xefe <__fp_round>
     d64:	c5 d0       	rcall	.+394    	; 0xef0 <__fp_pscB>
     d66:	40 f0       	brcs	.+16     	; 0xd78 <__divsf3+0x18>
     d68:	bc d0       	rcall	.+376    	; 0xee2 <__fp_pscA>
     d6a:	30 f0       	brcs	.+12     	; 0xd78 <__divsf3+0x18>
     d6c:	21 f4       	brne	.+8      	; 0xd76 <__divsf3+0x16>
     d6e:	5f 3f       	cpi	r21, 0xFF	; 255
     d70:	19 f0       	breq	.+6      	; 0xd78 <__divsf3+0x18>
     d72:	ae c0       	rjmp	.+348    	; 0xed0 <__fp_inf>
     d74:	51 11       	cpse	r21, r1
     d76:	f7 c0       	rjmp	.+494    	; 0xf66 <__fp_szero>
     d78:	b1 c0       	rjmp	.+354    	; 0xedc <__fp_nan>

00000d7a <__divsf3x>:
     d7a:	d2 d0       	rcall	.+420    	; 0xf20 <__fp_split3>
     d7c:	98 f3       	brcs	.-26     	; 0xd64 <__divsf3+0x4>

00000d7e <__divsf3_pse>:
     d7e:	99 23       	and	r25, r25
     d80:	c9 f3       	breq	.-14     	; 0xd74 <__divsf3+0x14>
     d82:	55 23       	and	r21, r21
     d84:	b1 f3       	breq	.-20     	; 0xd72 <__divsf3+0x12>
     d86:	95 1b       	sub	r25, r21
     d88:	55 0b       	sbc	r21, r21
     d8a:	bb 27       	eor	r27, r27
     d8c:	aa 27       	eor	r26, r26
     d8e:	62 17       	cp	r22, r18
     d90:	73 07       	cpc	r23, r19
     d92:	84 07       	cpc	r24, r20
     d94:	38 f0       	brcs	.+14     	; 0xda4 <__divsf3_pse+0x26>
     d96:	9f 5f       	subi	r25, 0xFF	; 255
     d98:	5f 4f       	sbci	r21, 0xFF	; 255
     d9a:	22 0f       	add	r18, r18
     d9c:	33 1f       	adc	r19, r19
     d9e:	44 1f       	adc	r20, r20
     da0:	aa 1f       	adc	r26, r26
     da2:	a9 f3       	breq	.-22     	; 0xd8e <__divsf3_pse+0x10>
     da4:	33 d0       	rcall	.+102    	; 0xe0c <__divsf3_pse+0x8e>
     da6:	0e 2e       	mov	r0, r30
     da8:	3a f0       	brmi	.+14     	; 0xdb8 <__divsf3_pse+0x3a>
     daa:	e0 e8       	ldi	r30, 0x80	; 128
     dac:	30 d0       	rcall	.+96     	; 0xe0e <__divsf3_pse+0x90>
     dae:	91 50       	subi	r25, 0x01	; 1
     db0:	50 40       	sbci	r21, 0x00	; 0
     db2:	e6 95       	lsr	r30
     db4:	00 1c       	adc	r0, r0
     db6:	ca f7       	brpl	.-14     	; 0xdaa <__divsf3_pse+0x2c>
     db8:	29 d0       	rcall	.+82     	; 0xe0c <__divsf3_pse+0x8e>
     dba:	fe 2f       	mov	r31, r30
     dbc:	27 d0       	rcall	.+78     	; 0xe0c <__divsf3_pse+0x8e>
     dbe:	66 0f       	add	r22, r22
     dc0:	77 1f       	adc	r23, r23
     dc2:	88 1f       	adc	r24, r24
     dc4:	bb 1f       	adc	r27, r27
     dc6:	26 17       	cp	r18, r22
     dc8:	37 07       	cpc	r19, r23
     dca:	48 07       	cpc	r20, r24
     dcc:	ab 07       	cpc	r26, r27
     dce:	b0 e8       	ldi	r27, 0x80	; 128
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <__divsf3_pse+0x56>
     dd2:	bb 0b       	sbc	r27, r27
     dd4:	80 2d       	mov	r24, r0
     dd6:	bf 01       	movw	r22, r30
     dd8:	ff 27       	eor	r31, r31
     dda:	93 58       	subi	r25, 0x83	; 131
     ddc:	5f 4f       	sbci	r21, 0xFF	; 255
     dde:	2a f0       	brmi	.+10     	; 0xdea <__divsf3_pse+0x6c>
     de0:	9e 3f       	cpi	r25, 0xFE	; 254
     de2:	51 05       	cpc	r21, r1
     de4:	68 f0       	brcs	.+26     	; 0xe00 <__divsf3_pse+0x82>
     de6:	74 c0       	rjmp	.+232    	; 0xed0 <__fp_inf>
     de8:	be c0       	rjmp	.+380    	; 0xf66 <__fp_szero>
     dea:	5f 3f       	cpi	r21, 0xFF	; 255
     dec:	ec f3       	brlt	.-6      	; 0xde8 <__divsf3_pse+0x6a>
     dee:	98 3e       	cpi	r25, 0xE8	; 232
     df0:	dc f3       	brlt	.-10     	; 0xde8 <__divsf3_pse+0x6a>
     df2:	86 95       	lsr	r24
     df4:	77 95       	ror	r23
     df6:	67 95       	ror	r22
     df8:	b7 95       	ror	r27
     dfa:	f7 95       	ror	r31
     dfc:	9f 5f       	subi	r25, 0xFF	; 255
     dfe:	c9 f7       	brne	.-14     	; 0xdf2 <__divsf3_pse+0x74>
     e00:	88 0f       	add	r24, r24
     e02:	91 1d       	adc	r25, r1
     e04:	96 95       	lsr	r25
     e06:	87 95       	ror	r24
     e08:	97 f9       	bld	r25, 7
     e0a:	08 95       	ret
     e0c:	e1 e0       	ldi	r30, 0x01	; 1
     e0e:	66 0f       	add	r22, r22
     e10:	77 1f       	adc	r23, r23
     e12:	88 1f       	adc	r24, r24
     e14:	bb 1f       	adc	r27, r27
     e16:	62 17       	cp	r22, r18
     e18:	73 07       	cpc	r23, r19
     e1a:	84 07       	cpc	r24, r20
     e1c:	ba 07       	cpc	r27, r26
     e1e:	20 f0       	brcs	.+8      	; 0xe28 <__divsf3_pse+0xaa>
     e20:	62 1b       	sub	r22, r18
     e22:	73 0b       	sbc	r23, r19
     e24:	84 0b       	sbc	r24, r20
     e26:	ba 0b       	sbc	r27, r26
     e28:	ee 1f       	adc	r30, r30
     e2a:	88 f7       	brcc	.-30     	; 0xe0e <__divsf3_pse+0x90>
     e2c:	e0 95       	com	r30
     e2e:	08 95       	ret

00000e30 <__fixunssfsi>:
     e30:	7f d0       	rcall	.+254    	; 0xf30 <__fp_splitA>
     e32:	88 f0       	brcs	.+34     	; 0xe56 <__fixunssfsi+0x26>
     e34:	9f 57       	subi	r25, 0x7F	; 127
     e36:	90 f0       	brcs	.+36     	; 0xe5c <__fixunssfsi+0x2c>
     e38:	b9 2f       	mov	r27, r25
     e3a:	99 27       	eor	r25, r25
     e3c:	b7 51       	subi	r27, 0x17	; 23
     e3e:	a0 f0       	brcs	.+40     	; 0xe68 <__fixunssfsi+0x38>
     e40:	d1 f0       	breq	.+52     	; 0xe76 <__fixunssfsi+0x46>
     e42:	66 0f       	add	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	88 1f       	adc	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	1a f0       	brmi	.+6      	; 0xe52 <__fixunssfsi+0x22>
     e4c:	ba 95       	dec	r27
     e4e:	c9 f7       	brne	.-14     	; 0xe42 <__fixunssfsi+0x12>
     e50:	12 c0       	rjmp	.+36     	; 0xe76 <__fixunssfsi+0x46>
     e52:	b1 30       	cpi	r27, 0x01	; 1
     e54:	81 f0       	breq	.+32     	; 0xe76 <__fixunssfsi+0x46>
     e56:	86 d0       	rcall	.+268    	; 0xf64 <__fp_zero>
     e58:	b1 e0       	ldi	r27, 0x01	; 1
     e5a:	08 95       	ret
     e5c:	83 c0       	rjmp	.+262    	; 0xf64 <__fp_zero>
     e5e:	67 2f       	mov	r22, r23
     e60:	78 2f       	mov	r23, r24
     e62:	88 27       	eor	r24, r24
     e64:	b8 5f       	subi	r27, 0xF8	; 248
     e66:	39 f0       	breq	.+14     	; 0xe76 <__fixunssfsi+0x46>
     e68:	b9 3f       	cpi	r27, 0xF9	; 249
     e6a:	cc f3       	brlt	.-14     	; 0xe5e <__fixunssfsi+0x2e>
     e6c:	86 95       	lsr	r24
     e6e:	77 95       	ror	r23
     e70:	67 95       	ror	r22
     e72:	b3 95       	inc	r27
     e74:	d9 f7       	brne	.-10     	; 0xe6c <__fixunssfsi+0x3c>
     e76:	3e f4       	brtc	.+14     	; 0xe86 <__fixunssfsi+0x56>
     e78:	90 95       	com	r25
     e7a:	80 95       	com	r24
     e7c:	70 95       	com	r23
     e7e:	61 95       	neg	r22
     e80:	7f 4f       	sbci	r23, 0xFF	; 255
     e82:	8f 4f       	sbci	r24, 0xFF	; 255
     e84:	9f 4f       	sbci	r25, 0xFF	; 255
     e86:	08 95       	ret

00000e88 <__fp_cmp>:
     e88:	99 0f       	add	r25, r25
     e8a:	00 08       	sbc	r0, r0
     e8c:	55 0f       	add	r21, r21
     e8e:	aa 0b       	sbc	r26, r26
     e90:	e0 e8       	ldi	r30, 0x80	; 128
     e92:	fe ef       	ldi	r31, 0xFE	; 254
     e94:	16 16       	cp	r1, r22
     e96:	17 06       	cpc	r1, r23
     e98:	e8 07       	cpc	r30, r24
     e9a:	f9 07       	cpc	r31, r25
     e9c:	c0 f0       	brcs	.+48     	; 0xece <__fp_cmp+0x46>
     e9e:	12 16       	cp	r1, r18
     ea0:	13 06       	cpc	r1, r19
     ea2:	e4 07       	cpc	r30, r20
     ea4:	f5 07       	cpc	r31, r21
     ea6:	98 f0       	brcs	.+38     	; 0xece <__fp_cmp+0x46>
     ea8:	62 1b       	sub	r22, r18
     eaa:	73 0b       	sbc	r23, r19
     eac:	84 0b       	sbc	r24, r20
     eae:	95 0b       	sbc	r25, r21
     eb0:	39 f4       	brne	.+14     	; 0xec0 <__fp_cmp+0x38>
     eb2:	0a 26       	eor	r0, r26
     eb4:	61 f0       	breq	.+24     	; 0xece <__fp_cmp+0x46>
     eb6:	23 2b       	or	r18, r19
     eb8:	24 2b       	or	r18, r20
     eba:	25 2b       	or	r18, r21
     ebc:	21 f4       	brne	.+8      	; 0xec6 <__fp_cmp+0x3e>
     ebe:	08 95       	ret
     ec0:	0a 26       	eor	r0, r26
     ec2:	09 f4       	brne	.+2      	; 0xec6 <__fp_cmp+0x3e>
     ec4:	a1 40       	sbci	r26, 0x01	; 1
     ec6:	a6 95       	lsr	r26
     ec8:	8f ef       	ldi	r24, 0xFF	; 255
     eca:	81 1d       	adc	r24, r1
     ecc:	81 1d       	adc	r24, r1
     ece:	08 95       	ret

00000ed0 <__fp_inf>:
     ed0:	97 f9       	bld	r25, 7
     ed2:	9f 67       	ori	r25, 0x7F	; 127
     ed4:	80 e8       	ldi	r24, 0x80	; 128
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	08 95       	ret

00000edc <__fp_nan>:
     edc:	9f ef       	ldi	r25, 0xFF	; 255
     ede:	80 ec       	ldi	r24, 0xC0	; 192
     ee0:	08 95       	ret

00000ee2 <__fp_pscA>:
     ee2:	00 24       	eor	r0, r0
     ee4:	0a 94       	dec	r0
     ee6:	16 16       	cp	r1, r22
     ee8:	17 06       	cpc	r1, r23
     eea:	18 06       	cpc	r1, r24
     eec:	09 06       	cpc	r0, r25
     eee:	08 95       	ret

00000ef0 <__fp_pscB>:
     ef0:	00 24       	eor	r0, r0
     ef2:	0a 94       	dec	r0
     ef4:	12 16       	cp	r1, r18
     ef6:	13 06       	cpc	r1, r19
     ef8:	14 06       	cpc	r1, r20
     efa:	05 06       	cpc	r0, r21
     efc:	08 95       	ret

00000efe <__fp_round>:
     efe:	09 2e       	mov	r0, r25
     f00:	03 94       	inc	r0
     f02:	00 0c       	add	r0, r0
     f04:	11 f4       	brne	.+4      	; 0xf0a <__fp_round+0xc>
     f06:	88 23       	and	r24, r24
     f08:	52 f0       	brmi	.+20     	; 0xf1e <__fp_round+0x20>
     f0a:	bb 0f       	add	r27, r27
     f0c:	40 f4       	brcc	.+16     	; 0xf1e <__fp_round+0x20>
     f0e:	bf 2b       	or	r27, r31
     f10:	11 f4       	brne	.+4      	; 0xf16 <__fp_round+0x18>
     f12:	60 ff       	sbrs	r22, 0
     f14:	04 c0       	rjmp	.+8      	; 0xf1e <__fp_round+0x20>
     f16:	6f 5f       	subi	r22, 0xFF	; 255
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	8f 4f       	sbci	r24, 0xFF	; 255
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	08 95       	ret

00000f20 <__fp_split3>:
     f20:	57 fd       	sbrc	r21, 7
     f22:	90 58       	subi	r25, 0x80	; 128
     f24:	44 0f       	add	r20, r20
     f26:	55 1f       	adc	r21, r21
     f28:	59 f0       	breq	.+22     	; 0xf40 <__fp_splitA+0x10>
     f2a:	5f 3f       	cpi	r21, 0xFF	; 255
     f2c:	71 f0       	breq	.+28     	; 0xf4a <__fp_splitA+0x1a>
     f2e:	47 95       	ror	r20

00000f30 <__fp_splitA>:
     f30:	88 0f       	add	r24, r24
     f32:	97 fb       	bst	r25, 7
     f34:	99 1f       	adc	r25, r25
     f36:	61 f0       	breq	.+24     	; 0xf50 <__fp_splitA+0x20>
     f38:	9f 3f       	cpi	r25, 0xFF	; 255
     f3a:	79 f0       	breq	.+30     	; 0xf5a <__fp_splitA+0x2a>
     f3c:	87 95       	ror	r24
     f3e:	08 95       	ret
     f40:	12 16       	cp	r1, r18
     f42:	13 06       	cpc	r1, r19
     f44:	14 06       	cpc	r1, r20
     f46:	55 1f       	adc	r21, r21
     f48:	f2 cf       	rjmp	.-28     	; 0xf2e <__fp_split3+0xe>
     f4a:	46 95       	lsr	r20
     f4c:	f1 df       	rcall	.-30     	; 0xf30 <__fp_splitA>
     f4e:	08 c0       	rjmp	.+16     	; 0xf60 <__fp_splitA+0x30>
     f50:	16 16       	cp	r1, r22
     f52:	17 06       	cpc	r1, r23
     f54:	18 06       	cpc	r1, r24
     f56:	99 1f       	adc	r25, r25
     f58:	f1 cf       	rjmp	.-30     	; 0xf3c <__fp_splitA+0xc>
     f5a:	86 95       	lsr	r24
     f5c:	71 05       	cpc	r23, r1
     f5e:	61 05       	cpc	r22, r1
     f60:	08 94       	sec
     f62:	08 95       	ret

00000f64 <__fp_zero>:
     f64:	e8 94       	clt

00000f66 <__fp_szero>:
     f66:	bb 27       	eor	r27, r27
     f68:	66 27       	eor	r22, r22
     f6a:	77 27       	eor	r23, r23
     f6c:	cb 01       	movw	r24, r22
     f6e:	97 f9       	bld	r25, 7
     f70:	08 95       	ret

00000f72 <__gesf2>:
     f72:	8a df       	rcall	.-236    	; 0xe88 <__fp_cmp>
     f74:	08 f4       	brcc	.+2      	; 0xf78 <__gesf2+0x6>
     f76:	8f ef       	ldi	r24, 0xFF	; 255
     f78:	08 95       	ret

00000f7a <__mulsf3>:
     f7a:	0b d0       	rcall	.+22     	; 0xf92 <__mulsf3x>
     f7c:	c0 cf       	rjmp	.-128    	; 0xefe <__fp_round>
     f7e:	b1 df       	rcall	.-158    	; 0xee2 <__fp_pscA>
     f80:	28 f0       	brcs	.+10     	; 0xf8c <__mulsf3+0x12>
     f82:	b6 df       	rcall	.-148    	; 0xef0 <__fp_pscB>
     f84:	18 f0       	brcs	.+6      	; 0xf8c <__mulsf3+0x12>
     f86:	95 23       	and	r25, r21
     f88:	09 f0       	breq	.+2      	; 0xf8c <__mulsf3+0x12>
     f8a:	a2 cf       	rjmp	.-188    	; 0xed0 <__fp_inf>
     f8c:	a7 cf       	rjmp	.-178    	; 0xedc <__fp_nan>
     f8e:	11 24       	eor	r1, r1
     f90:	ea cf       	rjmp	.-44     	; 0xf66 <__fp_szero>

00000f92 <__mulsf3x>:
     f92:	c6 df       	rcall	.-116    	; 0xf20 <__fp_split3>
     f94:	a0 f3       	brcs	.-24     	; 0xf7e <__mulsf3+0x4>

00000f96 <__mulsf3_pse>:
     f96:	95 9f       	mul	r25, r21
     f98:	d1 f3       	breq	.-12     	; 0xf8e <__mulsf3+0x14>
     f9a:	95 0f       	add	r25, r21
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	55 1f       	adc	r21, r21
     fa0:	62 9f       	mul	r22, r18
     fa2:	f0 01       	movw	r30, r0
     fa4:	72 9f       	mul	r23, r18
     fa6:	bb 27       	eor	r27, r27
     fa8:	f0 0d       	add	r31, r0
     faa:	b1 1d       	adc	r27, r1
     fac:	63 9f       	mul	r22, r19
     fae:	aa 27       	eor	r26, r26
     fb0:	f0 0d       	add	r31, r0
     fb2:	b1 1d       	adc	r27, r1
     fb4:	aa 1f       	adc	r26, r26
     fb6:	64 9f       	mul	r22, r20
     fb8:	66 27       	eor	r22, r22
     fba:	b0 0d       	add	r27, r0
     fbc:	a1 1d       	adc	r26, r1
     fbe:	66 1f       	adc	r22, r22
     fc0:	82 9f       	mul	r24, r18
     fc2:	22 27       	eor	r18, r18
     fc4:	b0 0d       	add	r27, r0
     fc6:	a1 1d       	adc	r26, r1
     fc8:	62 1f       	adc	r22, r18
     fca:	73 9f       	mul	r23, r19
     fcc:	b0 0d       	add	r27, r0
     fce:	a1 1d       	adc	r26, r1
     fd0:	62 1f       	adc	r22, r18
     fd2:	83 9f       	mul	r24, r19
     fd4:	a0 0d       	add	r26, r0
     fd6:	61 1d       	adc	r22, r1
     fd8:	22 1f       	adc	r18, r18
     fda:	74 9f       	mul	r23, r20
     fdc:	33 27       	eor	r19, r19
     fde:	a0 0d       	add	r26, r0
     fe0:	61 1d       	adc	r22, r1
     fe2:	23 1f       	adc	r18, r19
     fe4:	84 9f       	mul	r24, r20
     fe6:	60 0d       	add	r22, r0
     fe8:	21 1d       	adc	r18, r1
     fea:	82 2f       	mov	r24, r18
     fec:	76 2f       	mov	r23, r22
     fee:	6a 2f       	mov	r22, r26
     ff0:	11 24       	eor	r1, r1
     ff2:	9f 57       	subi	r25, 0x7F	; 127
     ff4:	50 40       	sbci	r21, 0x00	; 0
     ff6:	8a f0       	brmi	.+34     	; 0x101a <__mulsf3_pse+0x84>
     ff8:	e1 f0       	breq	.+56     	; 0x1032 <__mulsf3_pse+0x9c>
     ffa:	88 23       	and	r24, r24
     ffc:	4a f0       	brmi	.+18     	; 0x1010 <__mulsf3_pse+0x7a>
     ffe:	ee 0f       	add	r30, r30
    1000:	ff 1f       	adc	r31, r31
    1002:	bb 1f       	adc	r27, r27
    1004:	66 1f       	adc	r22, r22
    1006:	77 1f       	adc	r23, r23
    1008:	88 1f       	adc	r24, r24
    100a:	91 50       	subi	r25, 0x01	; 1
    100c:	50 40       	sbci	r21, 0x00	; 0
    100e:	a9 f7       	brne	.-22     	; 0xffa <__mulsf3_pse+0x64>
    1010:	9e 3f       	cpi	r25, 0xFE	; 254
    1012:	51 05       	cpc	r21, r1
    1014:	70 f0       	brcs	.+28     	; 0x1032 <__mulsf3_pse+0x9c>
    1016:	5c cf       	rjmp	.-328    	; 0xed0 <__fp_inf>
    1018:	a6 cf       	rjmp	.-180    	; 0xf66 <__fp_szero>
    101a:	5f 3f       	cpi	r21, 0xFF	; 255
    101c:	ec f3       	brlt	.-6      	; 0x1018 <__mulsf3_pse+0x82>
    101e:	98 3e       	cpi	r25, 0xE8	; 232
    1020:	dc f3       	brlt	.-10     	; 0x1018 <__mulsf3_pse+0x82>
    1022:	86 95       	lsr	r24
    1024:	77 95       	ror	r23
    1026:	67 95       	ror	r22
    1028:	b7 95       	ror	r27
    102a:	f7 95       	ror	r31
    102c:	e7 95       	ror	r30
    102e:	9f 5f       	subi	r25, 0xFF	; 255
    1030:	c1 f7       	brne	.-16     	; 0x1022 <__mulsf3_pse+0x8c>
    1032:	fe 2b       	or	r31, r30
    1034:	88 0f       	add	r24, r24
    1036:	91 1d       	adc	r25, r1
    1038:	96 95       	lsr	r25
    103a:	87 95       	ror	r24
    103c:	97 f9       	bld	r25, 7
    103e:	08 95       	ret

00001040 <_exit>:
    1040:	f8 94       	cli

00001042 <__stop_program>:
    1042:	ff cf       	rjmp	.-2      	; 0x1042 <__stop_program>
